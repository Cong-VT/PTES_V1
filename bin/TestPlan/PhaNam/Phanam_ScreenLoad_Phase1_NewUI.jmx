<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.1.1 r1855137">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan_PhaNam" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="ServerURLs" elementType="Argument">
            <stringProp name="Argument.name">ServerURLs</stringProp>
            <stringProp name="Argument.value">https://portal.hqsoft.vn:7443/PhaNamPerform</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ProjectCode" elementType="Argument">
            <stringProp name="Argument.name">ProjectCode</stringProp>
            <stringProp name="Argument.value">PhaNam</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="UserName" elementType="Argument">
            <stringProp name="Argument.name">UserName</stringProp>
            <stringProp name="Argument.value">Admin</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PassWord" elementType="Argument">
            <stringProp name="Argument.name">PassWord</stringProp>
            <stringProp name="Argument.value">P@ssw0rd</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DateExc" elementType="Argument">
            <stringProp name="Argument.name">DateExc</stringProp>
            <stringProp name="Argument.value">${__groovy(new Date().format(&apos;yyyy-MM-dd&apos;),)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ClickKey" elementType="Argument">
            <stringProp name="Argument.name">ClickKey</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TimeOut" elementType="Argument">
            <stringProp name="Argument.name">TimeOut</stringProp>
            <stringProp name="Argument.value">15</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="OM20700" elementType="Argument">
            <stringProp name="Argument.name">OM20700</stringProp>
            <stringProp name="Argument.value">OM20700</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="OM21100" elementType="Argument">
            <stringProp name="Argument.name">OM21100</stringProp>
            <stringProp name="Argument.value">OM21100</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SA00001" elementType="Argument">
            <stringProp name="Argument.name">SA00001</stringProp>
            <stringProp name="Argument.value">SA00001</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SA00500" elementType="Argument">
            <stringProp name="Argument.name">SA00500</stringProp>
            <stringProp name="Argument.value">SA00500</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SA03001" elementType="Argument">
            <stringProp name="Argument.name">SA03001</stringProp>
            <stringProp name="Argument.value">SA03001</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SA02800" elementType="Argument">
            <stringProp name="Argument.name">SA02800</stringProp>
            <stringProp name="Argument.value">SA02800</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SA00700" elementType="Argument">
            <stringProp name="Argument.name">SA00700</stringProp>
            <stringProp name="Argument.value">SA00700</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SA02600" elementType="Argument">
            <stringProp name="Argument.name">SA02600</stringProp>
            <stringProp name="Argument.value">SA02600</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SA04000" elementType="Argument">
            <stringProp name="Argument.name">SA04000</stringProp>
            <stringProp name="Argument.value">SA04000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SA02500" elementType="Argument">
            <stringProp name="Argument.name">SA02500</stringProp>
            <stringProp name="Argument.value">SA02500</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SI20600" elementType="Argument">
            <stringProp name="Argument.name">SI20600</stringProp>
            <stringProp name="Argument.value">SI20600</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SI20601" elementType="Argument">
            <stringProp name="Argument.name">SI20601</stringProp>
            <stringProp name="Argument.value">SI20601</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SI21900" elementType="Argument">
            <stringProp name="Argument.name">SI21900</stringProp>
            <stringProp name="Argument.value">SI21900</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SI20700" elementType="Argument">
            <stringProp name="Argument.name">SI20700</stringProp>
            <stringProp name="Argument.value">SI20700</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SI21700" elementType="Argument">
            <stringProp name="Argument.name">SI21700</stringProp>
            <stringProp name="Argument.value">SI21700</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SI22000" elementType="Argument">
            <stringProp name="Argument.name">SI22000</stringProp>
            <stringProp name="Argument.value">SI22000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SI21600" elementType="Argument">
            <stringProp name="Argument.name">SI21600</stringProp>
            <stringProp name="Argument.value">SI21600</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="AR21200" elementType="Argument">
            <stringProp name="Argument.name">AR21200</stringProp>
            <stringProp name="Argument.value">AR21200</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="IN20300" elementType="Argument">
            <stringProp name="Argument.name">IN20300</stringProp>
            <stringProp name="Argument.value">IN20300</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="IN20200" elementType="Argument">
            <stringProp name="Argument.name">IN20200</stringProp>
            <stringProp name="Argument.value">IN20200</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="IN20100" elementType="Argument">
            <stringProp name="Argument.name">IN20100</stringProp>
            <stringProp name="Argument.value">IN20100</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="IN20500" elementType="Argument">
            <stringProp name="Argument.name">IN20500</stringProp>
            <stringProp name="Argument.value">IN20500</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PO20100" elementType="Argument">
            <stringProp name="Argument.name">PO20100</stringProp>
            <stringProp name="Argument.value">PO20100</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="AR20100" elementType="Argument">
            <stringProp name="Argument.name">AR20100</stringProp>
            <stringProp name="Argument.value">AR20100</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="AR21100" elementType="Argument">
            <stringProp name="Argument.name">AR21100</stringProp>
            <stringProp name="Argument.value">AR21100</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="AR21000" elementType="Argument">
            <stringProp name="Argument.name">AR21000</stringProp>
            <stringProp name="Argument.value">AR21000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="AR20200" elementType="Argument">
            <stringProp name="Argument.name">AR20200</stringProp>
            <stringProp name="Argument.value">AR20200</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="AR20400" elementType="Argument">
            <stringProp name="Argument.name">AR20400</stringProp>
            <stringProp name="Argument.value">AR20400</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="AP20200" elementType="Argument">
            <stringProp name="Argument.name">AP20200</stringProp>
            <stringProp name="Argument.value">AP20200</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="AR24100" elementType="Argument">
            <stringProp name="Argument.name">AR24100</stringProp>
            <stringProp name="Argument.value">AR24100</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="AR20500" elementType="Argument">
            <stringProp name="Argument.name">AR20500</stringProp>
            <stringProp name="Argument.value">AR20500</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="OM28900" elementType="Argument">
            <stringProp name="Argument.name">OM28900</stringProp>
            <stringProp name="Argument.value">OM28900</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="OM21600" elementType="Argument">
            <stringProp name="Argument.name">OM21600</stringProp>
            <stringProp name="Argument.value">OM21600</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="OM29000" elementType="Argument">
            <stringProp name="Argument.name">OM29000</stringProp>
            <stringProp name="Argument.value">OM29000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="OM28600" elementType="Argument">
            <stringProp name="Argument.name">OM28600</stringProp>
            <stringProp name="Argument.value">OM28600</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="OM22001" elementType="Argument">
            <stringProp name="Argument.name">OM22001</stringProp>
            <stringProp name="Argument.value">OM22001</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="OM22002" elementType="Argument">
            <stringProp name="Argument.name">OM22002</stringProp>
            <stringProp name="Argument.value">OM22002</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="OM41200" elementType="Argument">
            <stringProp name="Argument.name">OM41200</stringProp>
            <stringProp name="Argument.value">OM41200</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="OM22003" elementType="Argument">
            <stringProp name="Argument.name">OM22003</stringProp>
            <stringProp name="Argument.value">OM22003</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="IN22001" elementType="Argument">
            <stringProp name="Argument.name">IN22001</stringProp>
            <stringProp name="Argument.value">IN22001</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="IN22000" elementType="Argument">
            <stringProp name="Argument.name">IN22000</stringProp>
            <stringProp name="Argument.value">IN22000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="IN23000" elementType="Argument">
            <stringProp name="Argument.name">IN23000</stringProp>
            <stringProp name="Argument.value">IN23000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="OM21500" elementType="Argument">
            <stringProp name="Argument.name">OM21500</stringProp>
            <stringProp name="Argument.value">OM21500</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="OM27700" elementType="Argument">
            <stringProp name="Argument.name">OM27700</stringProp>
            <stringProp name="Argument.value">OM27700</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="OM43100" elementType="Argument">
            <stringProp name="Argument.name">OM43100</stringProp>
            <stringProp name="Argument.value">OM43100</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="OM44500" elementType="Argument">
            <stringProp name="Argument.name">OM44500</stringProp>
            <stringProp name="Argument.value">OM44500</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="OM20510" elementType="Argument">
            <stringProp name="Argument.name">OM20510</stringProp>
            <stringProp name="Argument.value">OM20510</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="OM30400" elementType="Argument">
            <stringProp name="Argument.name">OM30400</stringProp>
            <stringProp name="Argument.value">OM30400</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="OM23800" elementType="Argument">
            <stringProp name="Argument.name">OM23800</stringProp>
            <stringProp name="Argument.value">OM23800</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Perform_Phanam" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <com.googlecode.jmeter.plugins.webdriver.config.FirefoxDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.FirefoxDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.FirefoxDriverConfig" testname="jp@gc - Firefox Driver Config" enabled="false">
          <stringProp name="WebDriverConfig.proxy_type">DIRECT</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host"></stringProp>
          <intProp name="WebDriverConfig.http_port">8080</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">false</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">true</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">false</boolProp>
          <boolProp name="FirefoxDriverConfig.general.useragent.override.enabled">true</boolProp>
          <boolProp name="FirefoxDriverConfig.network.negotiate-auth.allow-insecure-ntlm-v1">false</boolProp>
          <collectionProp name="FirefoxDriverConfig.general.extensions">
            <collectionProp name="25080">
              <stringProp name="0"></stringProp>
            </collectionProp>
          </collectionProp>
          <collectionProp name="FirefoxDriverConfig.general.preferences"/>
          <stringProp name="FirefoxDriverConfig.general.useragent.override">StvDriver\geckodriver.exe</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.config.FirefoxDriverConfig>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - Login" enabled="false">
          <stringProp name="WebDriverSampler.script">//WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;https://portal.hqsoft.vn:7443/PhaNamPerform/&apos;);
// Input UserName
	var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtUserName-inputEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	txtUserName.click();
	txtUserName.sendKeys(&quot;admin&quot;);
// Input P@ssw0rd
	var txtPassword= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtPassword-inputEl&quot;));
	txtPassword.click();
	txtPassword.sendKeys(&quot;P@ssw0rd&quot;);
// Click Login
	var btnlogin= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;btnLogin-btnIconEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	btnlogin.click();
//Open Midule OM
	
	//var checkElementOM= WDS.browser.findElement(org.openqa.selenium.By.cssSelector(&quot;#treeview-1051-record-module-OM&quot;));
	//if (checkElementOM != null)
	//	System.out.println(&quot;Element is Present&quot;);
	//else
	//	System.out.println(&quot;Element is Not Present&quot;);
	//var treeOM= WDS.browser.findElement(org.openqa.selenium.By.cssSelector(&quot;#treeview-1051-record-module-OM&quot;));
	//treeOM.doubleClick();

//WDS.sampleResult.sampleEnd()
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="OM20700" enabled="true"/>
        <hashTree>
          <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc -Config Driver" enabled="true">
            <stringProp name="TestPlan.comments">Config Chrome</stringProp>
            <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
            <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
            <stringProp name="WebDriverConfig.http_host">localhost</stringProp>
            <intProp name="WebDriverConfig.http_port">8888</intProp>
            <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
            <stringProp name="WebDriverConfig.https_host"></stringProp>
            <intProp name="WebDriverConfig.https_port">8080</intProp>
            <stringProp name="WebDriverConfig.ftp_host"></stringProp>
            <intProp name="WebDriverConfig.ftp_port">8080</intProp>
            <stringProp name="WebDriverConfig.socks_host"></stringProp>
            <intProp name="WebDriverConfig.socks_port">8080</intProp>
            <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
            <boolProp name="WebDriverConfig.maximize_browser">false</boolProp>
            <boolProp name="WebDriverConfig.reset_per_iteration">true</boolProp>
            <boolProp name="WebDriverConfig.dev_mode">true</boolProp>
            <stringProp name="ChromeDriverConfig.chromedriver_path">StvDriver\chromedriver.exe</stringProp>
            <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
            <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
            <boolProp name="ChromeDriverConfig.insecurecerts_enabled">false</boolProp>
          </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="ScrNbr" elementType="Argument">
                <stringProp name="Argument.name">ScrNbr</stringProp>
                <stringProp name="Argument.value">OM20700</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="DateBuild" elementType="Argument">
                <stringProp name="Argument.name">DateBuild</stringProp>
                <stringProp name="Argument.value">${__groovy(new Date().format(&apos;yyyy-MM-dd&apos;),)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - Login" enabled="true">
            <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;https://portal.hqsoft.vn:7443/PhaNamPerform/&apos;);
// Input UserName
	var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtUserName-inputEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	txtUserName.click();
	txtUserName.sendKeys(&quot;admin&quot;);
// Input P@ssw0rd
	var txtPassword= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtPassword-inputEl&quot;));
	txtPassword.click();
	txtPassword.sendKeys(&quot;P@ssw0rd&quot;);
// Click Login
	var btnlogin= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;btnLogin-btnIconEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	btnlogin.click();

WDS.sampleResult.sampleEnd()
</stringProp>
            <stringProp name="WebDriverSampler.parameters"></stringProp>
            <stringProp name="WebDriverSampler.language">javascript</stringProp>
          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
          <hashTree/>
          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc -Module OM" enabled="false">
            <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var wait=new support_ui.WebDriverWait(WDS.browser, 10)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
WDS.browser.manage().timeouts().pageLoadTimeout(10, timeunit.SECONDS);
function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}

WDS.sampleResult.sampleStart()
stvwait(3000);
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
	// Module OM
	var treeOM= WDS.browser.findElement(org.openqa.selenium.By.cssSelector(&quot;#treeview-1051-record-module-OM&quot;));
	actions.moveToElement(treeOM).doubleClick().perform()	

	// Module OM- Giá, Khuyến Mãi/Chiết Khấu
	//var treeOM_PP= WDS.browser.findElement(org.openqa.selenium.By.cssSelector(&quot;#treeview-1051-record-module-group-OM-PP&quot;));
	//actions.moveToElement(treeOM_PP).doubleClick().perform()	
	




WDS.sampleResult.sampleEnd()






</stringProp>
            <stringProp name="WebDriverSampler.parameters"></stringProp>
            <stringProp name="WebDriverSampler.language">javascript</stringProp>
          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
              <stringProp name="ConstantTimer.delay">2000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc -Module OM-PP" enabled="false">
            <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart()
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
	// Module OM
	//var treeOM= WDS.browser.findElement(org.openqa.selenium.By.cssSelector(&quot;#treeview-1051-record-module-OM&quot;));
	//actions.moveToElement(treeOM).doubleClick().perform()	

	// Module OM- Giá, Khuyến Mãi/Chiết Khấu
	var treeOM_PP= WDS.browser.findElement(org.openqa.selenium.By.cssSelector(&quot;#treeview-1051-record-module-group-OM-PP&quot;));
	actions.moveToElement(treeOM_PP).doubleClick().perform()	
	
WDS.sampleResult.sampleEnd()
</stringProp>
            <stringProp name="WebDriverSampler.parameters"></stringProp>
            <stringProp name="WebDriverSampler.language">javascript</stringProp>
          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc -Module OM-PP-OM20700" enabled="false">
            <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var wait=new support_ui.WebDriverWait(WDS.browser, 10)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit

WDS.sampleResult.sampleStart();
// Set timeout = 20s
WDS.browser.manage().timeouts().pageLoadTimeout(20, timeunit.SECONDS);
// CLick to open Screen
	var treeOM_PP= WDS.browser.findElement(org.openqa.selenium.By.cssSelector(&quot;#treeview-1051-record-module-group-screenOM20700&quot;));
	actions.moveToElement(treeOM_PP).doubleClick().perform()	
	//treeOM_PP.click();
// Find and waits IFrame Loaded
	try {
		wait.until(conditions.presenceOfElementLocated(pkg.By.cssSelector(&quot;#tabOM20700_IFrame&quot;)));
		
  	  //WDS.browser.findElement(pkg.By.id(&apos;tabOM20700&apos;))  
		} 
		catch (Exception) {
    		//WDS.sampleResult.sampleEnd();
    		//WDS.sampleResult.setSuccessful(true);
    		 WDS.sampleResult.setResponseMessage(&apos;stvmsg: tabOM20700_IFrame not found&apos;)
   		//WDS.sampleResult.sampleEnd();
		}		
// Switch to IFrame
WDS.browser.switchTo().frame(&quot;tabOM20700_IFrame&quot;)
// Verify screen load finish using FInd cboPriceID
		try {
  		  wait.until(conditions.presenceOfElementLocated(pkg.By.cssSelector(&quot;#cboPriceID&quot;)));
 		  // WDS.browser.findElement(pkg.By.cssSelector(&quot;#cboPriceID&quot;))  
 		 
			} 
		catch (Exception) { 
    //WDS.sampleResult.setSuccessful(true);    
      WDS.sampleResult.setResponseMessage(&apos;stvmsg: Screen not found&apos;)
		}
WDS.sampleResult.sampleEnd()
</stringProp>
            <stringProp name="WebDriverSampler.parameters"></stringProp>
            <stringProp name="WebDriverSampler.language">javascript</stringProp>
          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">5000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc-OM20700_ScreenLoad" enabled="true">
            <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 10)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	


// Set timeout = 15s
WDS.browser.manage().timeouts().pageLoadTimeout(15, timeunit.SECONDS);

WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;https://portal.hqsoft.vn:7443/PhaNamPerform/${ScrNbr}&apos;);	
wait.until(conditions.presenceOfElementLocated(pkg.By.id(&apos;cboPriceID-inputEl&apos;)));// wait cboPriceID appear
var cboPriceID= WDS.browser.findElement((pkg.By.id(&apos;cboPriceID-inputEl&apos;)));
var flag =0 ;
var Status=1 ;// default is Doneload
vars.put(flag,0)

do{
	//wait.until(conditions.invisibilityOfElementLocated(pkg.By.linkText(&apos;... vui&apos;)));
	//wait.until(ExpectedConditions.elementToBeClickable(pkg.By.id(&quot;cboPriceID&quot;)));
	//wait.until(pkg.ExpectedConditions.elementToBeClickable(pkg.By.id(&quot;txtDescr-inputEl&quot;)));		
	try {	
		WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Khong the click ,đang lock :&apos; + cboPriceID);	
		wait.until(pkg.ExpectedConditions.elementToBeClickable(pkg.By.id(&quot;txtDescr-inputEl&quot;)));			
		cboPriceID.click();
		flag ++ ;					
		}
	catch(exc) {
		stvwait(100);
		//WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Khong the click ,đang lock :&apos; + cboPriceID);
		//vars.put(Status,1)
		}
	
	//flag ++ ;
} while ((flag) &lt;5)
WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Done load, co the click :&apos; + cboPriceID);
WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Qty of flag :&apos; + flag);
//cboPriceID.click();
//cboPriceID.sendKeys(&quot;a&quot;);
/*
var cookies = WDS.browser.manage().getCookies()
    WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Browser Title:&apos; + WDS.browser.getTitle())
    WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   Cookie:&apos; + cookies)  
    WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   Cookie:&apos; + Status)  
    WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Request Header: &apos; + WDS.sampleResult.getRequestHeaders())
    WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Iframe / Windows : &apos; + WDS.browser.getWindowHandles())
*/


var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)	
//FileUtils.copyFile(mFile, new File(&quot;output/&quot; + WDS.name + &quot;-&quot; + WDS.parameters + &quot;.png&quot;)); 
WDS.sampleResult.sampleEnd()
screenshot.renameTo(new java.io.File(&apos;${ScrNbr}_${DateBuild}_Screenload.png&apos;))

</stringProp>
            <stringProp name="WebDriverSampler.parameters"></stringProp>
            <stringProp name="WebDriverSampler.language">javascript</stringProp>
          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc- ScreenLoad_rs" enabled="false">
            <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)

var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var wait=new support_ui.WebDriverWait(WDS.browser, 10)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	

// Process
// Set timeout = 15s
WDS.browser.manage().timeouts().pageLoadTimeout(15, timeunit.SECONDS);

WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;https://portal.hqsoft.vn:7443/PhaNamPerform/${ScrNbr}&apos;);	
wait.until(conditions.presenceOfElementLocated(pkg.By.id(&apos;cboPriceID-inputEl&apos;)));// wait cboPriceID appear
var cboPriceID= WDS.browser.findElement((pkg.By.id(&apos;cboPriceID-inputEl&apos;)));
var flag =0 ;
vars.put(flag,0)


do{
	wait.until(conditions.invisibilityOfElementLocated(pkg.By.linkText(&apos;... vui&apos;)));
	flag ++ ;
	try {	
		wait.until(ExpectedConditions.elementToBeClickable(pkg.By.id(&quot;cboPriceID&quot;)));
		//flag ++ ;
		cboPriceID.click();
			
	}
	catch(exc) {
		stvwait(300);
		WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Khong the click ,đang lock :&apos; + cboPriceID);
	}
	
} while (flag&lt;5)
cboPriceID.sendKeys(&quot;a&quot;);
WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Done load, co the click :&apos; + cboPriceID);

/*
var flag =1 ;
vars.put(flag,1)
	do{	
	wait.until(conditions.invisibilityOfElementLocated(pkg.By.linkText(&apos;... vui&apos;)));	
	//stvwait(1500)
	//wait.until(conditions.invisibilityOfElementLocated(pkg.By.xpath(&quot;//*[contains(@class, &apos;x-mask-msg-text&apos;)]&quot;))); // class = x-mask-msg-text
	flag ++ ;
	} while (flag&lt;5)
	//wait.until(conditions.invisibilityOfElementLocated(pkg.By.linkText(&apos;... Vui&apos;)));
	//wait.until(conditions.presenceOfElementLocated(pkg.By.linkText(&apos;...&apos;)))
	
	WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Browser Title:&apos; + cboPriceID);
WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Browser Title:&apos; + flag);
    WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Browser Title:&apos; + WDS.browser.getTitle())
    WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Browser CurrentUrl:&apos; + WDS.browser.getCurrentUrl())    
    WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   Cookie:&apos; + WDS.browser.manage().getCookies())   
    WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Request Header: &apos; + WDS.sampleResult.getRequestHeaders())
    WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Iframe / Windows : &apos; + WDS.browser.getWindowHandles())
 */ 

	  var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
WDS.sampleResult.sampleEnd()

   screenshot.renameTo(new java.io.File(&apos;${ScrNbr}_${DateBuild}_Screenload.png&apos;))

</stringProp>
            <stringProp name="WebDriverSampler.parameters"></stringProp>
            <stringProp name="WebDriverSampler.language">javascript</stringProp>
          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">0</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc- ScreenLoadDone" enabled="false">
            <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var wait=new support_ui.WebDriverWait(WDS.browser, 10)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit

function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}
	

WDS.sampleResult.sampleStart();

	//wait.until(conditions.presenceOfElementLocated(pkg.By.cssSelector(&quot;#cboPriceID&quot;)));	
	wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[contains(@class, &apos;x-mask-msg-text&apos;)]&quot;)));	
	  var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
   		screenshot.renameTo(new java.io.File(&apos;OM20700_Screenload.png&apos;))
WDS.sampleResult.sampleEnd()
</stringProp>
            <stringProp name="WebDriverSampler.parameters"></stringProp>
            <stringProp name="WebDriverSampler.language">javascript</stringProp>
          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
          <hashTree/>
          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc- OpenData" enabled="false">
            <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var wait=new support_ui.WebDriverWait(WDS.browser, 10)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var FileUtils = JavaImporter(org.apache.qpid.util)
var io = JavaImporter(java.io)
function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}
	

//WDS.browser.switchTo().frame(&quot;tabOM20700_IFrame&quot;)	
WDS.sampleResult.sampleStart();
// Set timeout = 20s
WDS.browser.manage().timeouts().pageLoadTimeout(20, timeunit.SECONDS);
// CLick to open Screen
	var cbopriceID= WDS.browser.findElement(pkg.By.cssSelector(&quot;#cboPriceID&quot;));
	//actions.moveToElement(treeOM_PP).doubleClick().perform()	
		cbopriceID.click();
	stvwait(200);
	//var cbopriceIDarrw= WDS.browser.findElement(pkg.By.xpath(&quot;//td[2]/table/tbody/tr/td[3]/div&quot;));
	//	cbopriceIDarrw.click();
	stvwait(200); // Set time to load IFram 200 ms
	//var stvdata=WDS.browser.findElement(pkg.By.xpath(&quot;//input[@name=&apos;q&apos;]&quot;))
	var cbopriceIDarrw= WDS.browser.findElement(pkg.By.xpath(&quot;//tr[6]/td&quot;));
	//xpath=//div[@id=&apos;boundlist-1248-listEl&apos;]/div/table/tbody/tr[6]/td
	//xpath=//tr[6]/td   -- possition
	cbopriceIDarrw.click();	
	//WDS.browser.switchTo().frame(&quot;tabSalesPrice&quot;)	
	//wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[contains(text(), &apos;Edofyl 500mg&apos;)]&quot;)));	
	 wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[contains(@class, &apos;x-mask-msg-text&apos;)]&quot;)));	
	    var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
   		screenshot.renameTo(new java.io.File(&apos;OM20700_OpenData.png&apos;))
	//	FileUtils.copy(screenshot, new io.File(&apos;C:\\PATH\\TO\\screenshot.png&apos;))    

   		
WDS.sampleResult.sampleEnd()
</stringProp>
            <stringProp name="WebDriverSampler.parameters"></stringProp>
            <stringProp name="WebDriverSampler.language">javascript</stringProp>
          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
          <hashTree/>
          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc-OM20700_ClosedWindows" enabled="false">
            <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var wait=new support_ui.WebDriverWait(WDS.browser, 10)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()

var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
screenshot.renameTo(new java.io.File(&apos;${ScrNbr}_${DateBuild}_BeforeClosed.png&apos;))

WDS.browser.close();
</stringProp>
            <stringProp name="WebDriverSampler.parameters"></stringProp>
            <stringProp name="WebDriverSampler.language">javascript</stringProp>
          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="OM20700" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc -Config Driver" enabled="true">
          <stringProp name="TestPlan.comments">Config Chrome</stringProp>
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host">localhost</stringProp>
          <intProp name="WebDriverConfig.http_port">8888</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">false</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">true</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">true</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">StvDriver\chromedriver.exe</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.insecurecerts_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </Arguments>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc -OM20700_Login" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;${ServerURLs}/&apos;);
// Input UserName
	var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtUserName-inputEl&quot;));	
	txtUserName.click();
	txtUserName.sendKeys(&quot;admin&quot;);
// Input P@ssw0rd
	var txtPassword= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtPassword-inputEl&quot;));
	txtPassword.click();
	txtPassword.sendKeys(&quot;P@ssw0rd&quot;);
// Click Login
	var btnlogin= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;btnLogin-btnIconEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	btnlogin.click();

WDS.sampleResult.sampleEnd()
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc-OM20700_ScreenLoad" enabled="true">
          <stringProp name="WebDriverSampler.script">var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 10)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;
// Congvt
function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	


//Start sampler
WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;${ServerURLs}/${OM20700}&apos;);	

// wait button refresh appear to veryfy
wait.until(conditions.presenceOfElementLocated(pkg.By.id(&apos;menuClickbtnRefresh-btnWrap&apos;)));


var flag =0 ;
var chkmask=null	
try {
	do {
		stvwait(200)
		WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   chua load xong :&apos; + chkmask);	
		var chkmask= WDS.browser.findElement(pkg.By.xpath(&quot;//*[contains(@class,&apos;x-mask&apos;)]&quot;));		
	}while (chkmask!=null)
}catch(exc)
	{	
		vars.put(chkmask,0)//unmask
		WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    unmask :&apos; + chkmask);
		}

if(${ClickKey}==1)
	{
	var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@id,&apos;txtDescr-inputEl&apos;)]&quot;)));
	cboKey.click();
	WDS.sampleResult.sampleEnd()	
	}
else
	{
		WDS.sampleResult.sampleEnd()	
	}

WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Done load, elementToBeClickable :&apos; + cboKey);

var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
FileControl.copyFile(screenshot, new File(&quot;ImgResult/${ProjectCode}/${DateExc}/${OM20700}/&quot; + &apos;${OM20700}_${DateExc}_Screenload.png&apos;));
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">3000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc-OM20700_ClosedWindows" enabled="false">
          <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var wait=new support_ui.WebDriverWait(WDS.browser, 10)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()

//var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
//screenshot.renameTo(new java.io.File(&apos;${ScrNbr}_${DateBuild}_BeforeClosed.png&apos;))

WDS.browser.close();
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="OM21100" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc -Config Driver" enabled="true">
          <stringProp name="TestPlan.comments">Config Chrome</stringProp>
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host">localhost</stringProp>
          <intProp name="WebDriverConfig.http_port">8888</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">false</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">true</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">true</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">StvDriver\chromedriver.exe</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.insecurecerts_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="KeyVerifyBy21100" elementType="Argument">
              <stringProp name="Argument.name">KeyVerifyBy21100</stringProp>
              <stringProp name="Argument.value">&quot;cboDiscID-inputEl&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">ID : cboDiscID-inputEl có thể click</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - OM21100_Login" enabled="true">
          <stringProp name="WebDriverSampler.script">var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 10)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;
function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	


WDS.sampleResult.sampleStart();

	WDS.browser.get(&apos;${ServerURLs}/&apos;);
	// Input UserName
	var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtUserName-inputEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	txtUserName.click();
	txtUserName.sendKeys(&quot;admin&quot;);
	// Input P@ssw0rd
	var txtPassword= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtPassword-inputEl&quot;));
	txtPassword.click();
	txtPassword.sendKeys(&quot;P@ssw0rd&quot;);
	// Click Login
	var btnlogin= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;btnLogin-btnIconEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	btnlogin.click();
	//stvwait(1500)
	wait.until(conditions.presenceOfElementLocated(pkg.By.id(&apos;tabMain&apos;)));	

WDS.sampleResult.sampleEnd();


	
WDS.sampleResult.sampleEnd()
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc-OM21100_ScreenLoad" enabled="true">
          <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 10)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;

function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	

// Set timeout = 20s
WDS.browser.manage().timeouts().pageLoadTimeout(${TimeOut}, timeunit.SECONDS);
var flag =0 ;
var Status=0 ;// default is notyet
vars.put(flag,0)

WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;${ServerURLs}/${OM21100}&apos;);	
wait.until(conditions.presenceOfElementLocated(pkg.By.id(&apos;Main.Event.menuClickbtnRefresh-btnWrap&apos;)));
//var cboKey= WDS.browser.findElement((pkg.By.id(&apos;cboDiscID-inputEl&apos;)));
var flag =0 ;
vars.put(flag,0)
var chkmask=null	
wait.until(conditions.invisibilityOfElementLocated(pkg.By.linkText(&apos;... vui&apos;)));
do{
	try {	
		WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Khong the click ,đang lock :&apos; + cboKey);	
		wait.until(pkg.ExpectedConditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@id,&apos;txtDescr-bodyEl&apos;)]&quot;)));
		var cboKey= WDS.browser.findElement((pkg.By.id(&apos;cboDiscID-inputEl&apos;)));
		cboKey.click();
		vars.put(flag,10)											
	}
	catch(exc) {
		stvwait(1000);		
		//WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Khong the click ,đang lock :&apos; + cboPriceID);		
	}	
	flag ++ ;
	WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Khong the click ,đang lock :&apos; + flag);
} while ((flag) &lt;10)

if(${ClickKey}==1)
	{
	var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@id,&apos;txtDescr-bodyEl&apos;)]&quot;)));
	cboKey.click();
	WDS.sampleResult.sampleEnd()	
	}
else
	{
		WDS.sampleResult.sampleEnd()	
	}

WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Done load, elementToBeClickable :&apos; + cboKey);
	
//screenshot.renameTo(new java.io.File(&apos;${ScrDNKM}_${DateExc}_Screenload.png&apos;))
var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
FileControl.copyFile(screenshot, new File(&quot;ImgResult/${ProjectCode}/${DateExc}/${ScrDNKM}/&quot; + &apos;${ScrDNKM}_${DateExc}_Screenload.png&apos;));


</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc-OM20700_ClosedWindows" enabled="false">
          <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var wait=new support_ui.WebDriverWait(WDS.browser, 10)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()

var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
screenshot.renameTo(new java.io.File(&apos;${ScrNbr}_${DateBuild}_BeforeClosed.png&apos;))

WDS.browser.close();
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="SA00500" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">2000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc -Config Driver" enabled="true">
          <stringProp name="TestPlan.comments">Config Chrome</stringProp>
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host">localhost</stringProp>
          <intProp name="WebDriverConfig.http_port">8888</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">false</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">true</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">true</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">StvDriver\chromedriver.exe</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.insecurecerts_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="KeyVerifyBySA00001" elementType="Argument">
              <stringProp name="Argument.name">KeyVerifyBySA00001</stringProp>
              <stringProp name="Argument.value">&quot;cboDiscID-inputEl&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">ID : cboDiscID-inputEl có thể click</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc -SA00500_Login" enabled="true">
          <stringProp name="WebDriverSampler.script">var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 10)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;
function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	


WDS.sampleResult.sampleStart();

	WDS.browser.get(&apos;${ServerURLs}/&apos;);
	// Input UserName
	var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtUserName-inputEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	txtUserName.click();
	txtUserName.sendKeys(&quot;admin&quot;);
	// Input P@ssw0rd
	var txtPassword= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtPassword-inputEl&quot;));
	txtPassword.click();
	txtPassword.sendKeys(&quot;P@ssw0rd&quot;);
	// Click Login
	var btnlogin= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;btnLogin-btnIconEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	btnlogin.click();
	//stvwait(1500)
	wait.until(conditions.presenceOfElementLocated(pkg.By.id(&apos;tabMain&apos;)));	

WDS.sampleResult.sampleEnd();


	
WDS.sampleResult.sampleEnd()
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@_SA00500_ScreenLoad" enabled="true">
          <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 10)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;


function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	

// KeyVerify
// Set timeout = 20s
WDS.browser.manage().timeouts().pageLoadTimeout(${TimeOut}, timeunit.SECONDS);

WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;${ServerURLs}/${SA00500}&apos;);	
wait.until(conditions.presenceOfElementLocated(pkg.By.id(&apos;menuClickbtnRefresh-btnWrap&apos;)));// wait key appear

var chkmask=null	
try {
	do {
		stvwait(200)
		WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   chua load xong :&apos; + chkmask);	
		var chkmask= WDS.browser.findElement(pkg.By.xpath(&quot;//*[contains(@class,&apos;x-mask&apos;)]&quot;));		
	}while (chkmask!=null)
}catch(exc)
	{	
		vars.put(chkmask,0)//unmask
		WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    unmask :&apos; + chkmask);
		}


if(${ClickKey}==1)
	{
	var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@role, &apos;gridcell&apos;)]/div&quot;)));
	cboKey.click();
	WDS.sampleResult.sampleEnd()	
	}
else
	{
		WDS.sampleResult.sampleEnd()	
	}



//screenshot.renameTo(new java.io.File(&apos;${SA00001}_${DateExc}_Screenload.png&apos;))
var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
FileControl.copyFile(screenshot, new File(&quot;ImgResult/${ProjectCode}/${DateExc}/${SA00500}/&quot; + &apos;${SA00500}_${DateExc}_Screenload.png&apos;));



</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">3000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="SA03001" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">2000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc -Config Driver" enabled="true">
          <stringProp name="TestPlan.comments">Config Chrome</stringProp>
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host">localhost</stringProp>
          <intProp name="WebDriverConfig.http_port">8888</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">false</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">true</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">true</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">StvDriver\chromedriver.exe</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.insecurecerts_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="KeyVerifyBySA03001" elementType="Argument">
              <stringProp name="Argument.name">KeyVerifyBySA03001</stringProp>
              <stringProp name="Argument.value">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
            </elementProp>
            <elementProp name="ClickKey" elementType="Argument">
              <stringProp name="Argument.name">ClickKey</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.desc">1 : Click , 0 : Không Click</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc -SA00500_Login" enabled="true">
          <stringProp name="WebDriverSampler.script">var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 10)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;
function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	


WDS.sampleResult.sampleStart();

	WDS.browser.get(&apos;${ServerURLs}/&apos;);
	// Input UserName
	var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtUserName-inputEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	txtUserName.click();
	txtUserName.sendKeys(&quot;admin&quot;);
	// Input P@ssw0rd
	var txtPassword= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtPassword-inputEl&quot;));
	txtPassword.click();
	txtPassword.sendKeys(&quot;P@ssw0rd&quot;);
	// Click Login
	var btnlogin= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;btnLogin-btnIconEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	btnlogin.click();
	//stvwait(1500)
	wait.until(conditions.presenceOfElementLocated(pkg.By.id(&apos;tabMain&apos;)));	

WDS.sampleResult.sampleEnd();


	
WDS.sampleResult.sampleEnd()
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@_SA03001_ScreenLoad" enabled="true">
          <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 10)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;


function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	

// KeyVerify
// Set timeout = 20s
WDS.browser.manage().timeouts().pageLoadTimeout(20, timeunit.SECONDS);

WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;https://portal.hqsoft.vn:7443/PhaNamPerform/${SA03001}&apos;);	
wait.until(conditions.presenceOfElementLocated(pkg.By.id(&apos;menuClickbtnRefresh-btnWrap&apos;)));// wait key appear


var chkmask=null	
try {
	do {
		stvwait(200)
		WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   chua load xong :&apos; + chkmask);	
		var chkmask= WDS.browser.findElement(pkg.By.xpath(&quot;//*[contains(@class,&apos;x-mask&apos;)]&quot;));		
	}while (chkmask!=null)
}catch(exc)
	{	
		vars.put(chkmask,0)//unmask
		WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    unmask :&apos; + chkmask);
		}


if(${ClickKey}==1)
	{
	var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@role, &apos;gridcell&apos;)]&quot;)));
	cboKey.click();
	WDS.sampleResult.sampleEnd()	
	}
else
	{
		WDS.sampleResult.sampleEnd()	
	}

var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
FileControl.copyFile(screenshot, new File(&quot;ImgResult/${ProjectCode}/${DateExc}/${SA03001}/&quot; + &apos;${SA03001}_${DateExc}_Screenload.png&apos;));
	




</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">3000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="SA02800" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">2000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc -Config Driver" enabled="true">
          <stringProp name="TestPlan.comments">Config Chrome</stringProp>
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host">localhost</stringProp>
          <intProp name="WebDriverConfig.http_port">8888</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">false</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">true</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">true</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">StvDriver\chromedriver.exe</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.insecurecerts_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="KeyVerifyBySA02800" elementType="Argument">
              <stringProp name="Argument.name">KeyVerifyBySA02800</stringProp>
              <stringProp name="Argument.value">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc -SA02800_Login" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;https://portal.hqsoft.vn:7443/PhaNamPerform/&apos;);
// Input UserName
	var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtUserName-inputEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	txtUserName.click();
	txtUserName.sendKeys(&quot;${UserName}&quot;);
// Input P@ssw0rd
	var txtPassword= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtPassword-inputEl&quot;));
	txtPassword.click();
	txtPassword.sendKeys(&quot;${PassWord}&quot;);
// Click Login
	var btnlogin= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;btnLogin-btnIconEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	btnlogin.click();

WDS.sampleResult.sampleEnd()
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@_SA02800_ScreenLoad" enabled="true">
          <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 10)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;


function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	

// KeyVerify
// Set timeout = 20s
WDS.browser.manage().timeouts().pageLoadTimeout(20, timeunit.SECONDS);

WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;https://portal.hqsoft.vn:7443/PhaNamPerform/${SA02800}&apos;);	
wait.until(conditions.presenceOfElementLocated(pkg.By.id(&apos;menuClickbtnRefresh-btnWrap&apos;)));// wait key appear
//var cboKey= WDS.browser.findElement((pkg.By.id(&apos;menuClickbtnNext-btnIconEl&apos;)));
try {	
		wait.until(conditions.invisibilityOfElementLocated(pkg.By.linkText(&apos;... vui&apos;)));
		//wait.until(ExpectedConditions.elementToBeClickable(pkg.By.id(&quot;menuClickbtnNext-btnIconEl&quot;)));
		wait.until(ExpectedConditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@role, &apos;gridcell&apos;)]&quot;)));	
		WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   chua load xong :&apos;);			
		}
	catch(exc) {
		stvwait(100);
		//WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Khong the click ,đang lock :&apos; + cboPriceID);
		//vars.put(Status,1)
		}

if(${ClickKey}==1)
	{
	var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@role, &apos;gridcell&apos;)]&quot;)));
	cboKey.click();
	WDS.sampleResult.sampleEnd()	
	}
else
	{
		WDS.sampleResult.sampleEnd()	
	}

WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Done load, elementToBeClickable :&apos; + cboKey);


WDS.sampleResult.sampleEnd()

//screenshot.renameTo(new java.io.File(&apos;${SA00001}_${DateExc}_Screenload.png&apos;))
var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
FileControl.copyFile(screenshot, new File(&quot;ImgResult/${ProjectCode}/${DateExc}/${SA02800}/&quot; + &apos;${SA02800}_${DateExc}_Screenload.png&apos;));



</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">3000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="SA00700" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">2000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc -Config Driver" enabled="true">
          <stringProp name="TestPlan.comments">Config Chrome</stringProp>
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host">localhost</stringProp>
          <intProp name="WebDriverConfig.http_port">8888</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">false</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">true</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">true</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">StvDriver\chromedriver.exe</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.insecurecerts_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="KeyVerifyBySA00700" elementType="Argument">
              <stringProp name="Argument.name">KeyVerifyBySA00700</stringProp>
              <stringProp name="Argument.value">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc -SA00700_Login" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;https://portal.hqsoft.vn:7443/PhaNamPerform/&apos;);
// Input UserName
	var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtUserName-inputEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	txtUserName.click();
	txtUserName.sendKeys(&quot;${UserName}&quot;);
// Input P@ssw0rd
	var txtPassword= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtPassword-inputEl&quot;));
	txtPassword.click();
	txtPassword.sendKeys(&quot;${PassWord}&quot;);
// Click Login
	var btnlogin= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;btnLogin-btnIconEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	btnlogin.click();

WDS.sampleResult.sampleEnd()
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@_SA00700_ScreenLoad" enabled="true">
          <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 10)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;


function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	

// KeyVerify
// Set timeout = 20s
WDS.browser.manage().timeouts().pageLoadTimeout(20, timeunit.SECONDS);

WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;https://portal.hqsoft.vn:7443/PhaNamPerform/${SA00700}&apos;);	
wait.until(conditions.presenceOfElementLocated(pkg.By.id(&apos;menuClickbtnRefresh-btnWrap&apos;)));// wait key appear
//var cboKey= WDS.browser.findElement((pkg.By.id(&apos;menuClickbtnNext-btnIconEl&apos;)));
try {	
		wait.until(conditions.invisibilityOfElementLocated(pkg.By.linkText(&apos;... vui&apos;)));
		//wait.until(ExpectedConditions.elementToBeClickable(pkg.By.id(&quot;menuClickbtnNext-btnIconEl&quot;)));
		wait.until(ExpectedConditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@id, &apos;cboRecType-triggerWrap&apos;)]&quot;)));	
		WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   chua load xong :&apos;);			
		}
	catch(exc) {
		stvwait(100);
		//WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Khong the click ,đang lock :&apos; + cboPriceID);
		//vars.put(Status,1)
		}

if(${ClickKey}==1)
	{
	var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@id, &apos;cboRecType-triggerWrap&apos;)]&quot;)));
	cboKey.click();
	WDS.sampleResult.sampleEnd()	
	}
else
	{
		WDS.sampleResult.sampleEnd()	
	}

WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Done load, elementToBeClickable :&apos; + cboKey);


WDS.sampleResult.sampleEnd()

//screenshot.renameTo(new java.io.File(&apos;${SA00001}_${DateExc}_Screenload.png&apos;))
var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
FileControl.copyFile(screenshot, new File(&quot;ImgResult/${ProjectCode}/${DateExc}/${SA00700}/&quot; + &apos;${SA00700}_${DateExc}_Screenload.png&apos;));



</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">3000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="SA02600" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">2000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc -Config Driver" enabled="true">
          <stringProp name="TestPlan.comments">Config Chrome</stringProp>
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host">localhost</stringProp>
          <intProp name="WebDriverConfig.http_port">8888</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">false</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">true</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">true</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">StvDriver\chromedriver.exe</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.insecurecerts_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="KeyVerifyBySA02600" elementType="Argument">
              <stringProp name="Argument.name">KeyVerifyBySA02600</stringProp>
              <stringProp name="Argument.value">[contains(@id, &apos;UserName-inputEl&apos;)]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">[contains(@id, &apos;UserName-inputEl&apos;)]]</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc -SA02600_Login" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;https://portal.hqsoft.vn:7443/PhaNamPerform/&apos;);
// Input UserName
	var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtUserName-inputEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	txtUserName.click();
	txtUserName.sendKeys(&quot;${UserName}&quot;);
// Input P@ssw0rd
	var txtPassword= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtPassword-inputEl&quot;));
	txtPassword.click();
	txtPassword.sendKeys(&quot;${PassWord}&quot;);
// Click Login
	var btnlogin= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;btnLogin-btnIconEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	btnlogin.click();

WDS.sampleResult.sampleEnd()
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@_SA02600_ScreenLoad" enabled="true">
          <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 10)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;


function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	

// KeyVerify
// Set timeout = 20s
WDS.browser.manage().timeouts().pageLoadTimeout(20, timeunit.SECONDS);

WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;https://portal.hqsoft.vn:7443/PhaNamPerform/${SA02600}&apos;);	
wait.until(conditions.presenceOfElementLocated(pkg.By.id(&apos;UserName-inputEl&apos;)));// wait key appear
//var cboKey= WDS.browser.findElement((pkg.By.id(&apos;menuClickbtnNext-btnIconEl&apos;)));
try {	
		wait.until(conditions.invisibilityOfElementLocated(pkg.By.linkText(&apos;... vui&apos;)));
		//wait.until(ExpectedConditions.elementToBeClickable(pkg.By.id(&quot;menuClickbtnNext-btnIconEl&quot;)));
		wait.until(ExpectedConditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@id, &apos;UserName-inputEl&apos;)]&quot;)));	
		WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   chua load xong :&apos;);			
		}
	catch(exc) {
		stvwait(100);
		//WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Khong the click ,đang lock :&apos; + cboPriceID);
		//vars.put(Status,1)
		}

if(${ClickKey}==1)
	{
	var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@id, &apos;UserName-inputEl&apos;)]&quot;)));
	cboKey.click();
	WDS.sampleResult.sampleEnd()	
	}
else
	{
		WDS.sampleResult.sampleEnd()	
	}

WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Done load, elementToBeClickable :&apos; + cboKey);


WDS.sampleResult.sampleEnd()

//screenshot.renameTo(new java.io.File(&apos;${SA00001}_${DateExc}_Screenload.png&apos;))
var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
FileControl.copyFile(screenshot, new File(&quot;ImgResult/${ProjectCode}/${DateExc}/${SA02600}/&quot; + &apos;${SA02600}_${DateExc}_Screenload.png&apos;));



</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">3000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="SA02500" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">2000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc -Config Driver" enabled="true">
          <stringProp name="TestPlan.comments">Config Chrome</stringProp>
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host">localhost</stringProp>
          <intProp name="WebDriverConfig.http_port">8888</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">false</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">true</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">true</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">StvDriver\chromedriver.exe</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.insecurecerts_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="KeyVerifyBySA02500" elementType="Argument">
              <stringProp name="Argument.name">KeyVerifyBySA02500</stringProp>
              <stringProp name="Argument.value">[contains(@id, &apos;UserName-inputEl&apos;)]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">[contains(@id, &apos;UserName-inputEl&apos;)]]</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc -SA02500_Login" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;https://portal.hqsoft.vn:7443/PhaNamPerform/&apos;);
// Input UserName
	var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtUserName-inputEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	txtUserName.click();
	txtUserName.sendKeys(&quot;${UserName}&quot;);
// Input P@ssw0rd
	var txtPassword= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtPassword-inputEl&quot;));
	txtPassword.click();
	txtPassword.sendKeys(&quot;${PassWord}&quot;);
// Click Login
	var btnlogin= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;btnLogin-btnIconEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	btnlogin.click();

WDS.sampleResult.sampleEnd()
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@_SA02600_ScreenLoad" enabled="true">
          <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 10)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;


function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	

// KeyVerify
// Set timeout = 20s
WDS.browser.manage().timeouts().pageLoadTimeout(20, timeunit.SECONDS);

WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;https://portal.hqsoft.vn:7443/PhaNamPerform/${SA02500}&apos;);	
wait.until(conditions.presenceOfElementLocated(pkg.By.id(&apos;txtOldPassword-inputEl&apos;)));// wait key appear
//var cboKey= WDS.browser.findElement((pkg.By.id(&apos;menuClickbtnNext-btnIconEl&apos;)));
try {	
		wait.until(conditions.invisibilityOfElementLocated(pkg.By.linkText(&apos;... vui&apos;)));
		//wait.until(ExpectedConditions.elementToBeClickable(pkg.By.id(&quot;menuClickbtnNext-btnIconEl&quot;)));
		wait.until(ExpectedConditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@id, &apos;txtOldPassword-inputEl&apos;)]&quot;)));
		WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   chua load xong :&apos;);			
		}
	catch(exc) {
		stvwait(100);
		//WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Khong the click ,đang lock :&apos; + cboPriceID);
		//vars.put(Status,1)
		}

if(${ClickKey}==1)
	{
	var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@id, &apos;txtOldPassword-inputEl&apos;)]&quot;)));
	cboKey.click();
	WDS.sampleResult.sampleEnd()	
	}
else
	{
		WDS.sampleResult.sampleEnd()	
	}

WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Done load, elementToBeClickable :&apos; + cboKey);


WDS.sampleResult.sampleEnd()

//screenshot.renameTo(new java.io.File(&apos;${SA00001}_${DateExc}_Screenload.png&apos;))
var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
FileControl.copyFile(screenshot, new File(&quot;ImgResult/${ProjectCode}/${DateExc}/${SA02500}/&quot; + &apos;${SA02500}_${DateExc}_Screenload.png&apos;));



</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">3000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="SA00001" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">2000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc -Config Driver" enabled="true">
          <stringProp name="TestPlan.comments">Config Chrome</stringProp>
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host">localhost</stringProp>
          <intProp name="WebDriverConfig.http_port">8888</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">false</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">true</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">true</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">StvDriver\chromedriver.exe</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.insecurecerts_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="KeyVerifyBySA00001" elementType="Argument">
              <stringProp name="Argument.name">KeyVerifyBySA00001</stringProp>
              <stringProp name="Argument.value">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc -SA00001_Login" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;https://portal.hqsoft.vn:7443/PhaNamPerform/&apos;);
// Input UserName
	var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtUserName-inputEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	txtUserName.click();
	txtUserName.sendKeys(&quot;${UserName}&quot;);
// Input P@ssw0rd
	var txtPassword= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtPassword-inputEl&quot;));
	txtPassword.click();
	txtPassword.sendKeys(&quot;${PassWord}&quot;);
// Click Login
	var btnlogin= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;btnLogin-btnIconEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	btnlogin.click();

WDS.sampleResult.sampleEnd()
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@_SA00001_ScreenLoad" enabled="true">
          <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 10)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;


function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	

// KeyVerify
// Set timeout = 20s
WDS.browser.manage().timeouts().pageLoadTimeout(20, timeunit.SECONDS);

WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;https://portal.hqsoft.vn:7443/PhaNamPerform/${SA00001}&apos;);	
wait.until(conditions.presenceOfElementLocated(pkg.By.id(&apos;menuClickbtnRefresh-btnWrap&apos;)));// wait key appear
//var cboKey= WDS.browser.findElement((pkg.By.id(&apos;menuClickbtnNext-btnIconEl&apos;)));
try {	
		wait.until(conditions.invisibilityOfElementLocated(pkg.By.linkText(&apos;... vui&apos;)));
		//wait.until(ExpectedConditions.elementToBeClickable(pkg.By.id(&quot;menuClickbtnNext-btnIconEl&quot;)));
		wait.until(ExpectedConditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@role, &apos;gridcell&apos;)]&quot;)));	
		WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   chua load xong :&apos;);			
		}
	catch(exc) {
		stvwait(100);
		//WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Khong the click ,đang lock :&apos; + cboPriceID);
		//vars.put(Status,1)
		}

if(${ClickKey}==1)
	{
	var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@role, &apos;gridcell&apos;)]&quot;)));
	cboKey.click();
	WDS.sampleResult.sampleEnd()	
	}
else
	{
		WDS.sampleResult.sampleEnd()	
	}

WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Done load, elementToBeClickable :&apos; + cboKey);


WDS.sampleResult.sampleEnd()

//screenshot.renameTo(new java.io.File(&apos;${SA00001}_${DateExc}_Screenload.png&apos;))
var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
FileControl.copyFile(screenshot, new File(&quot;ImgResult/${ProjectCode}/${DateExc}/${SA00001}/&quot; + &apos;${SA00001}_${DateExc}_Screenload.png&apos;));



</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">3000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="SI20600" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">2000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc -Config Driver" enabled="true">
          <stringProp name="TestPlan.comments">Config Chrome</stringProp>
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host">localhost</stringProp>
          <intProp name="WebDriverConfig.http_port">8888</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">false</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">true</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">true</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">StvDriver\chromedriver.exe</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.insecurecerts_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="KeyVerifyBySI20600" elementType="Argument">
              <stringProp name="Argument.name">KeyVerifyBySI20600</stringProp>
              <stringProp name="Argument.value">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc -SI20600_Login" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;https://portal.hqsoft.vn:7443/PhaNamPerform/&apos;);
// Input UserName
	var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtUserName-inputEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	txtUserName.click();
	txtUserName.sendKeys(&quot;${UserName}&quot;);
// Input P@ssw0rd
	var txtPassword= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtPassword-inputEl&quot;));
	txtPassword.click();
	txtPassword.sendKeys(&quot;${PassWord}&quot;);
// Click Login
	var btnlogin= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;btnLogin-btnIconEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	btnlogin.click();

WDS.sampleResult.sampleEnd()
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@_SI20600_ScreenLoad" enabled="true">
          <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 10)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;


function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	

// KeyVerify
// Set timeout = 20s
WDS.browser.manage().timeouts().pageLoadTimeout(20, timeunit.SECONDS);

WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;https://portal.hqsoft.vn:7443/PhaNamPerform/${SI20600}&apos;);	
wait.until(conditions.presenceOfElementLocated(pkg.By.id(&apos;menuClickbtnRefresh-btnWrap&apos;)));// wait key appear
//var cboKey= WDS.browser.findElement((pkg.By.id(&apos;menuClickbtnNext-btnIconEl&apos;)));
try {	
		wait.until(conditions.invisibilityOfElementLocated(pkg.By.linkText(&apos;... vui&apos;)));
		//wait.until(ExpectedConditions.elementToBeClickable(pkg.By.id(&quot;menuClickbtnNext-btnIconEl&quot;)));
		wait.until(ExpectedConditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@role, &apos;gridcell&apos;)]&quot;)));	
		WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   chua load xong :&apos;);			
		}
	catch(exc) {
		stvwait(100);
		//WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Khong the click ,đang lock :&apos; + cboPriceID);
		//vars.put(Status,1)
		}

if(${ClickKey}==1)
	{
	var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@role, &apos;gridcell&apos;)]&quot;)));
	cboKey.click();
	WDS.sampleResult.sampleEnd()	
	}
else
	{
		WDS.sampleResult.sampleEnd()	
	}

WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Done load, elementToBeClickable :&apos; + cboKey);


WDS.sampleResult.sampleEnd()

//screenshot.renameTo(new java.io.File(&apos;${SA00001}_${DateExc}_Screenload.png&apos;))
var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
FileControl.copyFile(screenshot, new File(&quot;ImgResult/${ProjectCode}/${DateExc}/${SI20600}/&quot; + &apos;${SI20600}_${DateExc}_Screenload.png&apos;));



</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">3000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="SI20601" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">2000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc -Config Driver" enabled="true">
          <stringProp name="TestPlan.comments">Config Chrome</stringProp>
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host">localhost</stringProp>
          <intProp name="WebDriverConfig.http_port">8888</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">false</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">true</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">true</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">StvDriver\chromedriver.exe</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.insecurecerts_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="KeyVerifyBySI20601" elementType="Argument">
              <stringProp name="Argument.name">KeyVerifyBySI20601</stringProp>
              <stringProp name="Argument.value">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc -SI20601_Login" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;https://portal.hqsoft.vn:7443/PhaNamPerform/&apos;);
// Input UserName
	var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtUserName-inputEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	txtUserName.click();
	txtUserName.sendKeys(&quot;${UserName}&quot;);
// Input P@ssw0rd
	var txtPassword= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtPassword-inputEl&quot;));
	txtPassword.click();
	txtPassword.sendKeys(&quot;${PassWord}&quot;);
// Click Login
	var btnlogin= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;btnLogin-btnIconEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	btnlogin.click();

WDS.sampleResult.sampleEnd()
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@_SI20601_ScreenLoad" enabled="true">
          <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 10)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;


function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	

// KeyVerify
// Set timeout = 20s
WDS.browser.manage().timeouts().pageLoadTimeout(20, timeunit.SECONDS);

WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;https://portal.hqsoft.vn:7443/PhaNamPerform/${SI20601}&apos;);	
wait.until(conditions.presenceOfElementLocated(pkg.By.id(&apos;menuClickbtnRefresh-btnWrap&apos;)));// wait key appear
//var cboKey= WDS.browser.findElement((pkg.By.id(&apos;menuClickbtnNext-btnIconEl&apos;)));
try {	
		wait.until(conditions.invisibilityOfElementLocated(pkg.By.linkText(&apos;... vui&apos;)));
		//wait.until(ExpectedConditions.elementToBeClickable(pkg.By.id(&quot;menuClickbtnNext-btnIconEl&quot;)));
		wait.until(ExpectedConditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@role, &apos;gridcell&apos;)]&quot;)));	
		WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   chua load xong :&apos;);			
		}
	catch(exc) {
		stvwait(100);
		//WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Khong the click ,đang lock :&apos; + cboPriceID);
		//vars.put(Status,1)
		}

if(${ClickKey}==1)
	{
	var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@role, &apos;gridcell&apos;)]&quot;)));
	cboKey.click();
	WDS.sampleResult.sampleEnd()	
	}
else
	{
		WDS.sampleResult.sampleEnd()	
	}

WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Done load, elementToBeClickable :&apos; + cboKey);


WDS.sampleResult.sampleEnd()

//screenshot.renameTo(new java.io.File(&apos;${SA00001}_${DateExc}_Screenload.png&apos;))
var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
FileControl.copyFile(screenshot, new File(&quot;ImgResult/${ProjectCode}/${DateExc}/${SI20601}/&quot; + &apos;${SI20601}_${DateExc}_Screenload.png&apos;));



</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">3000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="SI21900" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">2000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc -Config Driver" enabled="true">
          <stringProp name="TestPlan.comments">Config Chrome</stringProp>
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host">localhost</stringProp>
          <intProp name="WebDriverConfig.http_port">8888</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">false</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">true</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">true</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">StvDriver\chromedriver.exe</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.insecurecerts_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="KeyVerifyBySI20601" elementType="Argument">
              <stringProp name="Argument.name">KeyVerifyBySI20601</stringProp>
              <stringProp name="Argument.value">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc -SI21900_Login" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;https://portal.hqsoft.vn:7443/PhaNamPerform/&apos;);
// Input UserName
	var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtUserName-inputEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	txtUserName.click();
	txtUserName.sendKeys(&quot;${UserName}&quot;);
// Input P@ssw0rd
	var txtPassword= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtPassword-inputEl&quot;));
	txtPassword.click();
	txtPassword.sendKeys(&quot;${PassWord}&quot;);
// Click Login
	var btnlogin= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;btnLogin-btnIconEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	btnlogin.click();

WDS.sampleResult.sampleEnd()
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@_SI21900_ScreenLoad" enabled="true">
          <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 10)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;


function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	

// KeyVerify
// Set timeout = 20s
WDS.browser.manage().timeouts().pageLoadTimeout(20, timeunit.SECONDS);

WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;https://portal.hqsoft.vn:7443/PhaNamPerform/${SI21900}&apos;);	
wait.until(conditions.presenceOfElementLocated(pkg.By.id(&apos;menuClickbtnRefresh-btnWrap&apos;)));// wait key appear
//var cboKey= WDS.browser.findElement((pkg.By.id(&apos;menuClickbtnNext-btnIconEl&apos;)));
try {	
		wait.until(conditions.invisibilityOfElementLocated(pkg.By.linkText(&apos;... vui&apos;)));
		//wait.until(ExpectedConditions.elementToBeClickable(pkg.By.id(&quot;menuClickbtnNext-btnIconEl&quot;)));
		wait.until(ExpectedConditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@role, &apos;gridcell&apos;)]&quot;)));	
		WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   chua load xong :&apos;);			
		}
	catch(exc) {
		stvwait(100);
		//WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Khong the click ,đang lock :&apos; + cboPriceID);
		//vars.put(Status,1)
		}

if(${ClickKey}==1)
	{
	var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@role, &apos;gridcell&apos;)]&quot;)));
	cboKey.click();
	WDS.sampleResult.sampleEnd()	
	}
else
	{
		WDS.sampleResult.sampleEnd()	
	}

WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Done load, elementToBeClickable :&apos; + cboKey);


WDS.sampleResult.sampleEnd()

//screenshot.renameTo(new java.io.File(&apos;${SA00001}_${DateExc}_Screenload.png&apos;))
var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
FileControl.copyFile(screenshot, new File(&quot;ImgResult/${ProjectCode}/${DateExc}/${SI21900}/&quot; + &apos;${SI21900}_${DateExc}_Screenload.png&apos;));



</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">3000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="SI20700" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">2000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc -Config Driver" enabled="true">
          <stringProp name="TestPlan.comments">Config Chrome</stringProp>
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host">localhost</stringProp>
          <intProp name="WebDriverConfig.http_port">8888</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">false</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">true</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">true</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">StvDriver\chromedriver.exe</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.insecurecerts_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="KeyVerifyBySI20700" elementType="Argument">
              <stringProp name="Argument.name">KeyVerifyBySI20700</stringProp>
              <stringProp name="Argument.value">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc -SI20700_Login" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;https://portal.hqsoft.vn:7443/PhaNamPerform/&apos;);
// Input UserName
	var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtUserName-inputEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	txtUserName.click();
	txtUserName.sendKeys(&quot;${UserName}&quot;);
// Input P@ssw0rd
	var txtPassword= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtPassword-inputEl&quot;));
	txtPassword.click();
	txtPassword.sendKeys(&quot;${PassWord}&quot;);
// Click Login
	var btnlogin= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;btnLogin-btnIconEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	btnlogin.click();

WDS.sampleResult.sampleEnd()
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@_SI20700_ScreenLoad" enabled="true">
          <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 10)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;


function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	

// KeyVerify
// Set timeout = 20s
WDS.browser.manage().timeouts().pageLoadTimeout(20, timeunit.SECONDS);

WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;https://portal.hqsoft.vn:7443/PhaNamPerform/${SI20700}&apos;);	
wait.until(conditions.presenceOfElementLocated(pkg.By.id(&apos;menuClickbtnRefresh-btnWrap&apos;)));// wait key appear
//var cboKey= WDS.browser.findElement((pkg.By.id(&apos;menuClickbtnNext-btnIconEl&apos;)));
try {	
		wait.until(conditions.invisibilityOfElementLocated(pkg.By.linkText(&apos;... vui&apos;)));
		//wait.until(ExpectedConditions.elementToBeClickable(pkg.By.id(&quot;menuClickbtnNext-btnIconEl&quot;)));
		wait.until(ExpectedConditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@role, &apos;gridcell&apos;)]&quot;)));	
		WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   chua load xong :&apos;);			
		}
	catch(exc) {
		stvwait(100);
		//WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Khong the click ,đang lock :&apos; + cboPriceID);
		//vars.put(Status,1)
		}

if(${ClickKey}==1)
	{
	var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@role, &apos;gridcell&apos;)]&quot;)));
	cboKey.click();
	WDS.sampleResult.sampleEnd()	
	}
else
	{
		WDS.sampleResult.sampleEnd()	
	}

WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Done load, elementToBeClickable :&apos; + cboKey);


WDS.sampleResult.sampleEnd()

//screenshot.renameTo(new java.io.File(&apos;${SA00001}_${DateExc}_Screenload.png&apos;))
var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
FileControl.copyFile(screenshot, new File(&quot;ImgResult/${ProjectCode}/${DateExc}/${SI20700}/&quot; + &apos;${SI20700}_${DateExc}_Screenload.png&apos;));



</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">3000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="SI21700" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">2000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc -Config Driver" enabled="true">
          <stringProp name="TestPlan.comments">Config Chrome</stringProp>
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host">localhost</stringProp>
          <intProp name="WebDriverConfig.http_port">8888</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">false</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">true</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">true</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">StvDriver\chromedriver.exe</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.insecurecerts_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="KeyVerifyBySI20700" elementType="Argument">
              <stringProp name="Argument.name">KeyVerifyBySI20700</stringProp>
              <stringProp name="Argument.value">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc -SI21700_Login" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;https://portal.hqsoft.vn:7443/PhaNamPerform/&apos;);
// Input UserName
	var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtUserName-inputEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	txtUserName.click();
	txtUserName.sendKeys(&quot;${UserName}&quot;);
// Input P@ssw0rd
	var txtPassword= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtPassword-inputEl&quot;));
	txtPassword.click();
	txtPassword.sendKeys(&quot;${PassWord}&quot;);
// Click Login
	var btnlogin= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;btnLogin-btnIconEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	btnlogin.click();

WDS.sampleResult.sampleEnd()
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@_SI21700_ScreenLoad" enabled="true">
          <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 10)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;


function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	

// KeyVerify
// Set timeout = 20s
WDS.browser.manage().timeouts().pageLoadTimeout(20, timeunit.SECONDS);

WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;https://portal.hqsoft.vn:7443/PhaNamPerform/${SI21700}&apos;);	
wait.until(conditions.presenceOfElementLocated(pkg.By.id(&apos;menuClickbtnRefresh-btnWrap&apos;)));// wait key appear
//var cboKey= WDS.browser.findElement((pkg.By.id(&apos;menuClickbtnNext-btnIconEl&apos;)));
try {	
		wait.until(conditions.invisibilityOfElementLocated(pkg.By.linkText(&apos;... vui&apos;)));
		//wait.until(ExpectedConditions.elementToBeClickable(pkg.By.id(&quot;menuClickbtnNext-btnIconEl&quot;)));
		wait.until(ExpectedConditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@role, &apos;gridcell&apos;)]&quot;)));	
		WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   chua load xong :&apos;);			
		}
	catch(exc) {
		stvwait(100);
		//WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Khong the click ,đang lock :&apos; + cboPriceID);
		//vars.put(Status,1)
		}

if(${ClickKey}==1)
	{
	var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@role, &apos;gridcell&apos;)]&quot;)));
	cboKey.click();
	WDS.sampleResult.sampleEnd()	
	}
else
	{
		WDS.sampleResult.sampleEnd()	
	}

WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Done load, elementToBeClickable :&apos; + cboKey);


WDS.sampleResult.sampleEnd()

//screenshot.renameTo(new java.io.File(&apos;${SA00001}_${DateExc}_Screenload.png&apos;))
var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
FileControl.copyFile(screenshot, new File(&quot;ImgResult/${ProjectCode}/${DateExc}/${SI21700}/&quot; + &apos;${SI21700}_${DateExc}_Screenload.png&apos;));



</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">3000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="SI22000" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">2000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc -Config Driver" enabled="true">
          <stringProp name="TestPlan.comments">Config Chrome</stringProp>
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host">localhost</stringProp>
          <intProp name="WebDriverConfig.http_port">8888</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">false</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">true</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">true</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">StvDriver\chromedriver.exe</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.insecurecerts_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="KeyVerifyBySI20700" elementType="Argument">
              <stringProp name="Argument.name">KeyVerifyBySI20700</stringProp>
              <stringProp name="Argument.value">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc -SI22000_Login" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;https://portal.hqsoft.vn:7443/PhaNamPerform/&apos;);
// Input UserName
	var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtUserName-inputEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	txtUserName.click();
	txtUserName.sendKeys(&quot;${UserName}&quot;);
// Input P@ssw0rd
	var txtPassword= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtPassword-inputEl&quot;));
	txtPassword.click();
	txtPassword.sendKeys(&quot;${PassWord}&quot;);
// Click Login
	var btnlogin= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;btnLogin-btnIconEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	btnlogin.click();

WDS.sampleResult.sampleEnd()
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@_SI22000_ScreenLoad" enabled="true">
          <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 10)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;


function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	

// KeyVerify
// Set timeout = 20s
WDS.browser.manage().timeouts().pageLoadTimeout(20, timeunit.SECONDS);

WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;https://portal.hqsoft.vn:7443/PhaNamPerform/${SI22000}&apos;);	
wait.until(conditions.presenceOfElementLocated(pkg.By.id(&apos;menuClickbtnRefresh-btnWrap&apos;)));// wait key appear
//var cboKey= WDS.browser.findElement((pkg.By.id(&apos;menuClickbtnNext-btnIconEl&apos;)));
try {	
		wait.until(conditions.invisibilityOfElementLocated(pkg.By.linkText(&apos;... vui&apos;)));
		//wait.until(ExpectedConditions.elementToBeClickable(pkg.By.id(&quot;menuClickbtnNext-btnIconEl&quot;)));
		wait.until(ExpectedConditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@role, &apos;gridcell&apos;)]&quot;)));	
		WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   chua load xong :&apos;);			
		}
	catch(exc) {
		stvwait(100);
		//WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Khong the click ,đang lock :&apos; + cboPriceID);
		//vars.put(Status,1)
		}

if(${ClickKey}==1)
	{
	var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@role, &apos;gridcell&apos;)]&quot;)));
	cboKey.click();
	WDS.sampleResult.sampleEnd()	
	}
else
	{
		WDS.sampleResult.sampleEnd()	
	}

WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Done load, elementToBeClickable :&apos; + cboKey);


WDS.sampleResult.sampleEnd()

//screenshot.renameTo(new java.io.File(&apos;${SA00001}_${DateExc}_Screenload.png&apos;))
var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
FileControl.copyFile(screenshot, new File(&quot;ImgResult/${ProjectCode}/${DateExc}/${SI22000}/&quot; + &apos;${SI22000}_${DateExc}_Screenload.png&apos;));



</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">3000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="SI21600" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">2000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc -Config Driver" enabled="true">
          <stringProp name="TestPlan.comments">Config Chrome</stringProp>
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host">localhost</stringProp>
          <intProp name="WebDriverConfig.http_port">8888</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">false</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">true</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">true</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">StvDriver\chromedriver.exe</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.insecurecerts_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="KeyVerifyBySI20700" elementType="Argument">
              <stringProp name="Argument.name">KeyVerifyBySI20700</stringProp>
              <stringProp name="Argument.value">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc -SI21600_Login" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;https://portal.hqsoft.vn:7443/PhaNamPerform/&apos;);
// Input UserName
	var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtUserName-inputEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	txtUserName.click();
	txtUserName.sendKeys(&quot;${UserName}&quot;);
// Input P@ssw0rd
	var txtPassword= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtPassword-inputEl&quot;));
	txtPassword.click();
	txtPassword.sendKeys(&quot;${PassWord}&quot;);
// Click Login
	var btnlogin= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;btnLogin-btnIconEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	btnlogin.click();

WDS.sampleResult.sampleEnd()
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@_SI21600_ScreenLoad" enabled="true">
          <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 10)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;


function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	

// KeyVerify
// Set timeout = 20s
WDS.browser.manage().timeouts().pageLoadTimeout(20, timeunit.SECONDS);

WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;https://portal.hqsoft.vn:7443/PhaNamPerform/${SI21600}&apos;);	
wait.until(conditions.presenceOfElementLocated(pkg.By.id(&apos;menuClickbtnRefresh-btnWrap&apos;)));// wait key appear
//var cboKey= WDS.browser.findElement((pkg.By.id(&apos;menuClickbtnNext-btnIconEl&apos;)));
var flag =0 ;
var Status=1 ;// default is Doneload
vars.put(flag,0)
var chkmask=null	
try {
	do {
		WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   chua load xong :&apos; + chkmask);	
		var chkmask= WDS.browser.findElement(pkg.By.xpath(&quot;//*[contains(@class,&apos;x-mask&apos;)]&quot;));
		wait.until(conditions.invisibilityOfElementLocated(pkg.By.linkText(&apos;... vui&apos;)));
		//wait.until(conditions.invisibilityOfElementLocated(pkg.By.linkText(&apos;... vui&apos;)));
		//wait.until(ExpectedConditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@id,&apos;dteFromDate-triggerWrap&apos;)]/tbody/tr/td[2]/div&quot;)));	
		//wait.until(conditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@id,&apos;txtDescr-inputEl&apos;)]&quot;)));	
		}while (chkmask!=null)
}catch(exc)
	{	
		vars.put(chkmask,0)//unmask
		WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    unmask :&apos; + chkmask);
		}

	
if(${ClickKey}==1)
	{
	var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@id, &apos;txtDescr-inputEl&apos;)]&quot;)));
	cboKey.click();
	WDS.sampleResult.sampleEnd()	
	}
else
	{
		WDS.sampleResult.sampleEnd()	
	}

WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Done load, elementToBeClickable :&apos; + cboKey);


WDS.sampleResult.sampleEnd()

//screenshot.renameTo(new java.io.File(&apos;${SA00001}_${DateExc}_Screenload.png&apos;))
var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
FileControl.copyFile(screenshot, new File(&quot;ImgResult/${ProjectCode}/${DateExc}/${SI21600}/&quot; + &apos;${SI21600}_${DateExc}_Screenload.png&apos;));



</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">3000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="AR21200" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">2000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc -Config Driver" enabled="true">
          <stringProp name="TestPlan.comments">Config Chrome</stringProp>
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host">localhost</stringProp>
          <intProp name="WebDriverConfig.http_port">8888</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">false</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">true</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">true</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">StvDriver\chromedriver.exe</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.insecurecerts_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="KeyVerifyBySI20700" elementType="Argument">
              <stringProp name="Argument.name">KeyVerifyBySI20700</stringProp>
              <stringProp name="Argument.value">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc -AR21200_Login" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;https://portal.hqsoft.vn:7443/PhaNamPerform/&apos;);
// Input UserName
	var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtUserName-inputEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	txtUserName.click();
	txtUserName.sendKeys(&quot;${UserName}&quot;);
// Input P@ssw0rd
	var txtPassword= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtPassword-inputEl&quot;));
	txtPassword.click();
	txtPassword.sendKeys(&quot;${PassWord}&quot;);
// Click Login
	var btnlogin= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;btnLogin-btnIconEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	btnlogin.click();

WDS.sampleResult.sampleEnd()
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@_AR21200_ScreenLoad" enabled="true">
          <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 10)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;


function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	

// KeyVerify
// Set timeout = 20s
WDS.browser.manage().timeouts().pageLoadTimeout(20, timeunit.SECONDS);

WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;https://portal.hqsoft.vn:7443/PhaNamPerform/${AR21200}&apos;);	
wait.until(conditions.presenceOfElementLocated(pkg.By.id(&apos;menuClickbtnRefresh-btnWrap&apos;)));// wait key appear
//var cboKey= WDS.browser.findElement((pkg.By.id(&apos;menuClickbtnNext-btnIconEl&apos;)));
try {	
		wait.until(conditions.invisibilityOfElementLocated(pkg.By.linkText(&apos;... vui&apos;)));
		//wait.until(ExpectedConditions.elementToBeClickable(pkg.By.id(&quot;menuClickbtnNext-btnIconEl&quot;)));
		wait.until(ExpectedConditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@role, &apos;gridcell&apos;)]&quot;)));	
		WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   chua load xong :&apos;);			
		}
	catch(exc) {
		stvwait(100);
		//WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Khong the click ,đang lock :&apos; + cboPriceID);
		//vars.put(Status,1)
		}

if(${ClickKey}==1)
	{
	var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@role, &apos;gridcell&apos;)]&quot;)));
	cboKey.click();
	WDS.sampleResult.sampleEnd()	
	}
else
	{
		WDS.sampleResult.sampleEnd()	
	}

WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Done load, elementToBeClickable :&apos; + cboKey);


WDS.sampleResult.sampleEnd()

//screenshot.renameTo(new java.io.File(&apos;${SA00001}_${DateExc}_Screenload.png&apos;))
var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
FileControl.copyFile(screenshot, new File(&quot;ImgResult/${ProjectCode}/${DateExc}/${AR21200}/&quot; + &apos;${AR21200}_${DateExc}_Screenload.png&apos;));



</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">3000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="IN20300" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">2000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc -Config Driver" enabled="true">
          <stringProp name="TestPlan.comments">Config Chrome</stringProp>
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host">localhost</stringProp>
          <intProp name="WebDriverConfig.http_port">8888</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">false</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">true</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">true</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">StvDriver\chromedriver.exe</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.insecurecerts_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="KeyVerifyBySI20700" elementType="Argument">
              <stringProp name="Argument.name">KeyVerifyBySI20700</stringProp>
              <stringProp name="Argument.value">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc -IN20300_Login" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;${ServerURLs}/&apos;);
// Input UserName
	var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtUserName-inputEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	txtUserName.click();
	txtUserName.sendKeys(&quot;${UserName}&quot;);
// Input P@ssw0rd
	var txtPassword= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtPassword-inputEl&quot;));
	txtPassword.click();
	txtPassword.sendKeys(&quot;${PassWord}&quot;);
// Click Login
	var btnlogin= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;btnLogin-btnIconEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	btnlogin.click();

WDS.sampleResult.sampleEnd()
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@_IN20300_ScreenLoad" enabled="true">
          <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 10)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;


function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	

// KeyVerify
// Set timeout = 20s
WDS.browser.manage().timeouts().pageLoadTimeout(20, timeunit.SECONDS);

WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;${ServerURLs}/${IN20300}&apos;);	
wait.until(conditions.presenceOfElementLocated(pkg.By.id(&apos;menuClickbtnRefresh-btnWrap&apos;)));// wait key appear
//var cboKey= WDS.browser.findElement((pkg.By.id(&apos;menuClickbtnNext-btnIconEl&apos;)));
var flag =0 ;
var Status=1 ;// default is Doneload
vars.put(flag,0)
do {
	try {	
		wait.until(conditions.invisibilityOfElementLocated(pkg.By.linkText(&apos;... vui&apos;)));
		//wait.until(ExpectedConditions.elementToBeClickable(pkg.By.id(&quot;menuClickbtnNext-btnIconEl&quot;)));
		wait.until(ExpectedConditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@id, &apos;txtWhKeeper-inputEl&apos;)]&quot;)));	
		WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   chua load xong :&apos;);			
		}
		catch(exc) {
		flag++
		stvwait(300);
		//WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Khong the click ,đang lock :&apos; + cboPriceID);
		//vars.put(Status,1)
		}
	} while (flag&lt;2) //
	
if(${ClickKey}==1)
	{
	var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@id, &apos;txtWhKeeper-inputEl&apos;)]&quot;)));
	cboKey.click();
	WDS.sampleResult.sampleEnd()	
	}
else
	{
		WDS.sampleResult.sampleEnd()	
	}

WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Done load, elementToBeClickable :&apos; + cboKey);


WDS.sampleResult.sampleEnd()

//screenshot.renameTo(new java.io.File(&apos;${SA00001}_${DateExc}_Screenload.png&apos;))
var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
FileControl.copyFile(screenshot, new File(&quot;ImgResult/${ProjectCode}/${DateExc}/${IN20300}/&quot; + &apos;${IN20300}_${DateExc}_Screenload.png&apos;));



</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">3000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="IN20200" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">txtDescr-inputEl</stringProp>
      </ThreadGroup>
      <hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">2000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc -Config Driver" enabled="true">
          <stringProp name="TestPlan.comments">Config Chrome</stringProp>
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host">localhost</stringProp>
          <intProp name="WebDriverConfig.http_port">8888</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">false</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">true</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">true</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">StvDriver\chromedriver.exe</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.insecurecerts_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="KeyVerifyBySI20700" elementType="Argument">
              <stringProp name="Argument.name">KeyVerifyBySI20700</stringProp>
              <stringProp name="Argument.value">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc -IN20200_Login" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;${ServerURLs}/&apos;);
// Input UserName
	var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtUserName-inputEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	txtUserName.click();
	txtUserName.sendKeys(&quot;${UserName}&quot;);
// Input P@ssw0rd
	var txtPassword= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtPassword-inputEl&quot;));
	txtPassword.click();
	txtPassword.sendKeys(&quot;${PassWord}&quot;);
// Click Login
	var btnlogin= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;btnLogin-btnIconEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	btnlogin.click();

WDS.sampleResult.sampleEnd()
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@_IN20200_ScreenLoad" enabled="true">
          <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 10)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;


function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	

// KeyVerify
// Set timeout = 20s
WDS.browser.manage().timeouts().pageLoadTimeout(20, timeunit.SECONDS);

WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;${ServerURLs}/${IN20200}&apos;);	
wait.until(conditions.presenceOfElementLocated(pkg.By.id(&apos;menuClickbtnRefresh-btnWrap&apos;)));// wait key appear
//var cboKey= WDS.browser.findElement((pkg.By.id(&apos;menuClickbtnNext-btnIconEl&apos;)));
var flag =0 ;
var Status=1 ;// default is Doneload
vars.put(flag,0)
do {
	try {	
		wait.until(conditions.invisibilityOfElementLocated(pkg.By.linkText(&apos;... vui&apos;)));
		//wait.until(ExpectedConditions.elementToBeClickable(pkg.By.id(&quot;menuClickbtnNext-btnIconEl&quot;)));
		wait.until(ExpectedConditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@id, &apos;txtDescr-inputEl&apos;)]&quot;)));	
		WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   chua load xong :&apos;);			
		}
		catch(exc) {
		flag++
		stvwait(300);
		//WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Khong the click ,đang lock :&apos; + cboPriceID);
		//vars.put(Status,1)
		}
	} while (flag&lt;2) //
	
if(${ClickKey}==1)
	{
	var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@id, &apos;txtDescr-inputEl&apos;)]&quot;)));
	cboKey.click();
	WDS.sampleResult.sampleEnd()	
	}
else
	{
		WDS.sampleResult.sampleEnd()	
	}

WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Done load, elementToBeClickable :&apos; + cboKey);


WDS.sampleResult.sampleEnd()

//screenshot.renameTo(new java.io.File(&apos;${SA00001}_${DateExc}_Screenload.png&apos;))
var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
FileControl.copyFile(screenshot, new File(&quot;ImgResult/${ProjectCode}/${DateExc}/${IN20200}/&quot; + &apos;${IN20200}_${DateExc}_Screenload.png&apos;));



</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">3000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="IN20100" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">Grigcell</stringProp>
      </ThreadGroup>
      <hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">2000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc -Config Driver" enabled="true">
          <stringProp name="TestPlan.comments">Config Chrome</stringProp>
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host">localhost</stringProp>
          <intProp name="WebDriverConfig.http_port">8888</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">false</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">true</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">true</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">StvDriver\chromedriver.exe</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.insecurecerts_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="KeyVerifyBySI20700" elementType="Argument">
              <stringProp name="Argument.name">KeyVerifyBySI20700</stringProp>
              <stringProp name="Argument.value">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc -IN20100_Login" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;https://portal.hqsoft.vn:7443/PhaNamPerform/&apos;);
WDS.browser.get(&apos;${ServerURLs}/&apos;);	
// Input UserName
	var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtUserName-inputEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	txtUserName.click();
	txtUserName.sendKeys(&quot;${UserName}&quot;);
// Input P@ssw0rd
	var txtPassword= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtPassword-inputEl&quot;));
	txtPassword.click();
	txtPassword.sendKeys(&quot;${PassWord}&quot;);
// Click Login
	var btnlogin= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;btnLogin-btnIconEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	btnlogin.click();

WDS.sampleResult.sampleEnd()
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@_SI22000_ScreenLoad" enabled="true">
          <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 10)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;


function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	

// KeyVerify
// Set timeout = 20s
WDS.browser.manage().timeouts().pageLoadTimeout(20, timeunit.SECONDS);

WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;${ServerURLs}/${IN20100}&apos;);	
wait.until(conditions.presenceOfElementLocated(pkg.By.id(&apos;menuClickbtnRefresh-btnWrap&apos;)));// wait key appear
//var cboKey= WDS.browser.findElement((pkg.By.id(&apos;menuClickbtnNext-btnIconEl&apos;)));
try {	
		wait.until(conditions.invisibilityOfElementLocated(pkg.By.linkText(&apos;... vui&apos;)));
		//wait.until(ExpectedConditions.elementToBeClickable(pkg.By.id(&quot;menuClickbtnNext-btnIconEl&quot;)));
		wait.until(ExpectedConditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@role, &apos;gridcell&apos;)]&quot;)));	
		WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   chua load xong :&apos;);			
		}
	catch(exc) {
		stvwait(100);
		//WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Khong the click ,đang lock :&apos; + cboPriceID);
		//vars.put(Status,1)
		}

if(${ClickKey}==1)
	{
	var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@role, &apos;gridcell&apos;)]&quot;)));
	cboKey.click();
	WDS.sampleResult.sampleEnd()	
	}
else
	{
		WDS.sampleResult.sampleEnd()	
	}

WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Done load, elementToBeClickable :&apos; + cboKey);


WDS.sampleResult.sampleEnd()

//screenshot.renameTo(new java.io.File(&apos;${SA00001}_${DateExc}_Screenload.png&apos;))
var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
FileControl.copyFile(screenshot, new File(&quot;ImgResult/${ProjectCode}/${DateExc}/${IN20100}/&quot; + &apos;${IN20100}_${DateExc}_Screenload.png&apos;));



</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">3000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="IN20500" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">txtDescr-inputEl</stringProp>
      </ThreadGroup>
      <hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">2000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc -Config Driver" enabled="true">
          <stringProp name="TestPlan.comments">Config Chrome</stringProp>
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host">localhost</stringProp>
          <intProp name="WebDriverConfig.http_port">8888</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">false</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">true</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">true</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">StvDriver\chromedriver.exe</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.insecurecerts_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="KeyVerifyBySI20700" elementType="Argument">
              <stringProp name="Argument.name">KeyVerifyBySI20700</stringProp>
              <stringProp name="Argument.value">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc -IN20500_Login" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;${ServerURLs}/&apos;);
// Input UserName
	var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtUserName-inputEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	txtUserName.click();
	txtUserName.sendKeys(&quot;${UserName}&quot;);
// Input P@ssw0rd
	var txtPassword= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtPassword-inputEl&quot;));
	txtPassword.click();
	txtPassword.sendKeys(&quot;${PassWord}&quot;);
// Click Login
	var btnlogin= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;btnLogin-btnIconEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	btnlogin.click();

WDS.sampleResult.sampleEnd()
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@_IN20500_ScreenLoad" enabled="true">
          <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 10)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;


function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	

// KeyVerify
// Set timeout = 20s
WDS.browser.manage().timeouts().pageLoadTimeout(20, timeunit.SECONDS);

WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;${ServerURLs}/${IN20500}&apos;);	
wait.until(conditions.presenceOfElementLocated(pkg.By.id(&apos;menuClickbtnRefresh-btnWrap&apos;)));// wait key appear
//var cboKey= WDS.browser.findElement((pkg.By.id(&apos;menuClickbtnNext-btnIconEl&apos;)));
var flag =0 ;
var Status=1 ;// default is Doneload
vars.put(flag,0)
do {
	try {	
		wait.until(conditions.invisibilityOfElementLocated(pkg.By.linkText(&apos;... vui&apos;)));
		//wait.until(ExpectedConditions.elementToBeClickable(pkg.By.id(&quot;menuClickbtnNext-btnIconEl&quot;)));
		wait.until(ExpectedConditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@id, &apos;txtDescr1-inputEl&apos;)]&quot;)));	
		WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   chua load xong :&apos;);			
		}
		catch(exc) {
		flag++
		stvwait(300);
		//WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Khong the click ,đang lock :&apos; + cboPriceID);
		//vars.put(Status,1)
		}
	} while (flag&lt;2) //
	
if(${ClickKey}==1)
	{
	var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@id, &apos;txtDescr1-inputEl&apos;)]&quot;)));
	cboKey.click();
	WDS.sampleResult.sampleEnd()	
	}
else
	{
		WDS.sampleResult.sampleEnd()	
	}

WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Done load, elementToBeClickable :&apos; + cboKey);


WDS.sampleResult.sampleEnd()

//screenshot.renameTo(new java.io.File(&apos;${SA00001}_${DateExc}_Screenload.png&apos;))
var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
FileControl.copyFile(screenshot, new File(&quot;ImgResult/${ProjectCode}/${DateExc}/${IN20500}/&quot; + &apos;${IN20500}_${DateExc}_Screenload.png&apos;));



</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">3000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="PO20100" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">txtDescr-inputEl</stringProp>
      </ThreadGroup>
      <hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">2000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc -Config Driver" enabled="true">
          <stringProp name="TestPlan.comments">Config Chrome</stringProp>
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host">localhost</stringProp>
          <intProp name="WebDriverConfig.http_port">8888</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">false</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">true</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">true</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">StvDriver\chromedriver.exe</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.insecurecerts_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="KeyVerifyBySI20700" elementType="Argument">
              <stringProp name="Argument.name">KeyVerifyBySI20700</stringProp>
              <stringProp name="Argument.value">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc -PO20100_Login" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;${ServerURLs}/&apos;);
// Input UserName
	var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtUserName-inputEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	txtUserName.click();
	txtUserName.sendKeys(&quot;${UserName}&quot;);
// Input P@ssw0rd
	var txtPassword= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtPassword-inputEl&quot;));
	txtPassword.click();
	txtPassword.sendKeys(&quot;${PassWord}&quot;);
// Click Login
	var btnlogin= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;btnLogin-btnIconEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	btnlogin.click();

WDS.sampleResult.sampleEnd()
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@_PO20100_ScreenLoad" enabled="true">
          <stringProp name="TestPlan.comments">Descr-inputEl</stringProp>
          <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 10)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;


function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	

// KeyVerify
// Set timeout = 20s
WDS.browser.manage().timeouts().pageLoadTimeout(20, timeunit.SECONDS);

WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;${ServerURLs}/${PO20100}&apos;);	
wait.until(conditions.presenceOfElementLocated(pkg.By.id(&apos;menuClickbtnRefresh-btnWrap&apos;)));// wait key appear
//var cboKey= WDS.browser.findElement((pkg.By.id(&apos;menuClickbtnNext-btnIconEl&apos;)));
var flag =0 ;
var Status=1 ;// default is Doneload
vars.put(flag,0)
do {
	try {	
		wait.until(conditions.invisibilityOfElementLocated(pkg.By.linkText(&apos;... vui&apos;)));
		//wait.until(ExpectedConditions.elementToBeClickable(pkg.By.id(&quot;menuClickbtnNext-btnIconEl&quot;)));
		wait.until(ExpectedConditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@id, &apos;Descr-inputEl&apos;)]&quot;)));	
		WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   chua load xong :&apos;);			
		}
		catch(exc) {
		flag++
		stvwait(300);
		//WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Khong the click ,đang lock :&apos; + cboPriceID);
		//vars.put(Status,1)
		}
	} while (flag&lt;2) //
	
if(${ClickKey}==1)
	{
	var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@id, &apos;Descr-inputEl&apos;)]&quot;)));
	cboKey.click();
	WDS.sampleResult.sampleEnd()	
	}
else
	{
		WDS.sampleResult.sampleEnd()	
	}

WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Done load, elementToBeClickable :&apos; + cboKey);


WDS.sampleResult.sampleEnd()

//screenshot.renameTo(new java.io.File(&apos;${SA00001}_${DateExc}_Screenload.png&apos;))
var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
FileControl.copyFile(screenshot, new File(&quot;ImgResult/${ProjectCode}/${DateExc}/${PO20100}/&quot; + &apos;${PO20100}_${DateExc}_Screenload.png&apos;));



</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">3000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="AR20100" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">txtDescr-inputEl</stringProp>
      </ThreadGroup>
      <hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">2000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc -Config Driver" enabled="true">
          <stringProp name="TestPlan.comments">Config Chrome</stringProp>
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host">localhost</stringProp>
          <intProp name="WebDriverConfig.http_port">8888</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">false</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">true</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">true</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">StvDriver\chromedriver.exe</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.insecurecerts_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="KeyVerifyBySI20700" elementType="Argument">
              <stringProp name="Argument.name">KeyVerifyBySI20700</stringProp>
              <stringProp name="Argument.value">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc -AR20100_Login" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;${ServerURLs}/&apos;);
// Input UserName
	var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtUserName-inputEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	txtUserName.click();
	txtUserName.sendKeys(&quot;${UserName}&quot;);
// Input P@ssw0rd
	var txtPassword= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtPassword-inputEl&quot;));
	txtPassword.click();
	txtPassword.sendKeys(&quot;${PassWord}&quot;);
// Click Login
	var btnlogin= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;btnLogin-btnIconEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	btnlogin.click();

WDS.sampleResult.sampleEnd()
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@_AR20100_ScreenLoad" enabled="true">
          <stringProp name="TestPlan.comments">txtDescr-inputEl</stringProp>
          <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 10)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;


function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	

// KeyVerify
// Set timeout = 20s
WDS.browser.manage().timeouts().pageLoadTimeout(20, timeunit.SECONDS);

WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;${ServerURLs}/${AR20100}&apos;);	
wait.until(conditions.presenceOfElementLocated(pkg.By.id(&apos;menuClickbtnRefresh-btnWrap&apos;)));// wait key appear
//var cboKey= WDS.browser.findElement((pkg.By.id(&apos;menuClickbtnNext-btnIconEl&apos;)));
var flag =0 ;
var Status=1 ;// default is Doneload
vars.put(flag,0)
do {
	try {	
		wait.until(conditions.invisibilityOfElementLocated(pkg.By.linkText(&apos;... vui&apos;)));
		//wait.until(ExpectedConditions.elementToBeClickable(pkg.By.id(&quot;menuClickbtnNext-btnIconEl&quot;)));
		wait.until(ExpectedConditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@id, &apos;txtDescr-inputEl&apos;)]&quot;)));	
		WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   chua load xong :&apos;);			
		}
		catch(exc) {
		flag++
		stvwait(300);
		//WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Khong the click ,đang lock :&apos; + cboPriceID);
		//vars.put(Status,1)
		}
	} while (flag&lt;2) //
	
if(${ClickKey}==1)
	{
	var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@id, &apos;txtDescr-inputEl&apos;)]&quot;)));
	cboKey.click();
	WDS.sampleResult.sampleEnd()	
	}
else
	{
		WDS.sampleResult.sampleEnd()	
	}

WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Done load, elementToBeClickable :&apos; + cboKey);


WDS.sampleResult.sampleEnd()

//screenshot.renameTo(new java.io.File(&apos;${SA00001}_${DateExc}_Screenload.png&apos;))
var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
FileControl.copyFile(screenshot, new File(&quot;ImgResult/${ProjectCode}/${DateExc}/${AR20100}/&quot; + &apos;${AR20100}_${DateExc}_Screenload.png&apos;));



</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">3000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="AR21100" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">Grigcell</stringProp>
      </ThreadGroup>
      <hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">2000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc -Config Driver" enabled="true">
          <stringProp name="TestPlan.comments">Config Chrome</stringProp>
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host">localhost</stringProp>
          <intProp name="WebDriverConfig.http_port">8888</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">false</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">true</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">true</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">StvDriver\chromedriver.exe</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.insecurecerts_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="KeyVerifyBySI20700" elementType="Argument">
              <stringProp name="Argument.name">KeyVerifyBySI20700</stringProp>
              <stringProp name="Argument.value">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc -AR21100_Login" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;https://portal.hqsoft.vn:7443/PhaNamPerform/&apos;);
WDS.browser.get(&apos;${ServerURLs}/&apos;);	
// Input UserName
	var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtUserName-inputEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	txtUserName.click();
	txtUserName.sendKeys(&quot;${UserName}&quot;);
// Input P@ssw0rd
	var txtPassword= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtPassword-inputEl&quot;));
	txtPassword.click();
	txtPassword.sendKeys(&quot;${PassWord}&quot;);
// Click Login
	var btnlogin= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;btnLogin-btnIconEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	btnlogin.click();

WDS.sampleResult.sampleEnd()
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@_AR21100_ScreenLoad" enabled="true">
          <stringProp name="TestPlan.comments">gridcell</stringProp>
          <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 10)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;


function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	

// KeyVerify
// Set timeout = 20s
WDS.browser.manage().timeouts().pageLoadTimeout(20, timeunit.SECONDS);

WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;${ServerURLs}/${AR21100}&apos;);	
wait.until(conditions.presenceOfElementLocated(pkg.By.id(&apos;menuClickbtnRefresh-btnWrap&apos;)));// wait key appear

try {	
		wait.until(conditions.invisibilityOfElementLocated(pkg.By.linkText(&apos;... vui&apos;)));		
		wait.until(ExpectedConditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@role, &apos;gridcell&apos;)]&quot;)));	
		//wait.until(ExpectedConditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@id, &apos;txtDescr-inputEl&apos;)]&quot;)));	
		WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   chua load xong :&apos;);			
		}
	catch(exc) {
		stvwait(100);
		//WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Khong the click ,đang lock :&apos; + cboPriceID);
		//vars.put(Status,1)
		}

if(${ClickKey}==1)
	{
	var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@role, &apos;gridcell&apos;)]&quot;)));
	//var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@id, &apos;txtDescr-inputEl&apos;)]&quot;)));
	cboKey.click();
	WDS.sampleResult.sampleEnd()	
	}
else
	{
		WDS.sampleResult.sampleEnd()	
	}

WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Done load, elementToBeClickable :&apos; + cboKey);


WDS.sampleResult.sampleEnd()

//screenshot.renameTo(new java.io.File(&apos;${SA00001}_${DateExc}_Screenload.png&apos;))
var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
FileControl.copyFile(screenshot, new File(&quot;ImgResult/${ProjectCode}/${DateExc}/${AR21100}/&quot; + &apos;${AR21100}_${DateExc}_Screenload.png&apos;));



</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">3000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="AR21000" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">2000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc -Config Driver" enabled="true">
          <stringProp name="TestPlan.comments">Config Chrome</stringProp>
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host">localhost</stringProp>
          <intProp name="WebDriverConfig.http_port">8888</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">false</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">true</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">true</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">StvDriver\chromedriver.exe</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.insecurecerts_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="KeyVerifyBySI20700" elementType="Argument">
              <stringProp name="Argument.name">KeyVerifyBySI20700</stringProp>
              <stringProp name="Argument.value">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc -AR21000_Login" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;https://portal.hqsoft.vn:7443/PhaNamPerform/&apos;);
WDS.browser.get(&apos;${ServerURLs}/&apos;);	
// Input UserName
	var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtUserName-inputEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	txtUserName.click();
	txtUserName.sendKeys(&quot;${UserName}&quot;);
// Input P@ssw0rd
	var txtPassword= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtPassword-inputEl&quot;));
	txtPassword.click();
	txtPassword.sendKeys(&quot;${PassWord}&quot;);
// Click Login
	var btnlogin= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;btnLogin-btnIconEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	btnlogin.click();

WDS.sampleResult.sampleEnd()
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@_AR21000_ScreenLoad" enabled="true">
          <stringProp name="TestPlan.comments">gridcell</stringProp>
          <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 10)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;


function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	

// KeyVerify
// Set timeout = 20s
WDS.browser.manage().timeouts().pageLoadTimeout(20, timeunit.SECONDS);

WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;${ServerURLs}/${AR21000}&apos;);	
wait.until(conditions.presenceOfElementLocated(pkg.By.id(&apos;menuClickbtnRefresh-btnWrap&apos;)));// wait key appear

try {	
		wait.until(conditions.invisibilityOfElementLocated(pkg.By.linkText(&apos;... vui&apos;)));		
		wait.until(ExpectedConditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@role, &apos;gridcell&apos;)]&quot;)));	
		//wait.until(ExpectedConditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@id, &apos;txtDescr-inputEl&apos;)]&quot;)));	
		WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   chua load xong :&apos;);			
		}
	catch(exc) {
		stvwait(100);
		//WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Khong the click ,đang lock :&apos; + cboPriceID);
		//vars.put(Status,1)
		}

if(${ClickKey}==1)
	{
	var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@role, &apos;gridcell&apos;)]&quot;)));
	//var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@id, &apos;txtDescr-inputEl&apos;)]&quot;)));
	cboKey.click();
	WDS.sampleResult.sampleEnd()	
	}
else
	{
		WDS.sampleResult.sampleEnd()	
	}

WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Done load, elementToBeClickable :&apos; + cboKey);


WDS.sampleResult.sampleEnd()

//screenshot.renameTo(new java.io.File(&apos;${SA00001}_${DateExc}_Screenload.png&apos;))
var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
FileControl.copyFile(screenshot, new File(&quot;ImgResult/${ProjectCode}/${DateExc}/${AR21000}/&quot; + &apos;${AR21000}_${DateExc}_Screenload.png&apos;));



</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">3000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="AR20200" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">2000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc -Config Driver" enabled="true">
          <stringProp name="TestPlan.comments">Config Chrome</stringProp>
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host">localhost</stringProp>
          <intProp name="WebDriverConfig.http_port">8888</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">false</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">true</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">true</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">StvDriver\chromedriver.exe</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.insecurecerts_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="KeyVerifyBySI20700" elementType="Argument">
              <stringProp name="Argument.name">KeyVerifyBySI20700</stringProp>
              <stringProp name="Argument.value">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc -AR20200_Login" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;https://portal.hqsoft.vn:7443/PhaNamPerform/&apos;);
WDS.browser.get(&apos;${ServerURLs}/&apos;);	
// Input UserName
	var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtUserName-inputEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	txtUserName.click();
	txtUserName.sendKeys(&quot;${UserName}&quot;);
// Input P@ssw0rd
	var txtPassword= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtPassword-inputEl&quot;));
	txtPassword.click();
	txtPassword.sendKeys(&quot;${PassWord}&quot;);
// Click Login
	var btnlogin= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;btnLogin-btnIconEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	btnlogin.click();

WDS.sampleResult.sampleEnd()
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@_AR20200_ScreenLoad" enabled="true">
          <stringProp name="TestPlan.comments">gridcell</stringProp>
          <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 10)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;


function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	

// KeyVerify
// Set timeout = 20s
WDS.browser.manage().timeouts().pageLoadTimeout(20, timeunit.SECONDS);

WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;${ServerURLs}/${AR20200}&apos;);	
wait.until(conditions.presenceOfElementLocated(pkg.By.id(&apos;menuClickbtnRefresh-btnWrap&apos;)));// wait key appear

try {	
		wait.until(conditions.invisibilityOfElementLocated(pkg.By.linkText(&apos;... vui&apos;)));		
		//wait.until(ExpectedConditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@role, &apos;gridcell&apos;)]&quot;)));	
		wait.until(ExpectedConditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@id, &apos;txtName-inputEl&apos;)]&quot;)));	
		WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   chua load xong :&apos;);			
		}
	catch(exc) {
		stvwait(100);
		//WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Khong the click ,đang lock :&apos; + cboPriceID);
		//vars.put(Status,1)
		}

if(${ClickKey}==1)
	{
	//var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@role, &apos;gridcell&apos;)]&quot;)));
	var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@id, &apos;txtName-inputEl&apos;)]&quot;)));
	cboKey.click();
	WDS.sampleResult.sampleEnd()	
	}
else
	{
		WDS.sampleResult.sampleEnd()	
	}

WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Done load, elementToBeClickable :&apos; + cboKey);


//WDS.sampleResult.sampleEnd()

//screenshot.renameTo(new java.io.File(&apos;${SA00001}_${DateExc}_Screenload.png&apos;))
var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
FileControl.copyFile(screenshot, new File(&quot;ImgResult/${ProjectCode}/${DateExc}/${AR20200}/&quot; + &apos;${AR20200}_${DateExc}_Screenload.png&apos;));



</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">3000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="AR20400" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">2000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc -Config Driver" enabled="true">
          <stringProp name="TestPlan.comments">Config Chrome</stringProp>
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host">localhost</stringProp>
          <intProp name="WebDriverConfig.http_port">8888</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">false</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">true</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">true</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">StvDriver\chromedriver.exe</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.insecurecerts_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="KeyVerifyBySI20700" elementType="Argument">
              <stringProp name="Argument.name">KeyVerifyBySI20700</stringProp>
              <stringProp name="Argument.value">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc -AR20400_Login" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;https://portal.hqsoft.vn:7443/PhaNamPerform/&apos;);
WDS.browser.get(&apos;${ServerURLs}/&apos;);	
// Input UserName
	var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtUserName-inputEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	txtUserName.click();
	txtUserName.sendKeys(&quot;${UserName}&quot;);
// Input P@ssw0rd
	var txtPassword= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtPassword-inputEl&quot;));
	txtPassword.click();
	txtPassword.sendKeys(&quot;${PassWord}&quot;);
// Click Login
	var btnlogin= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;btnLogin-btnIconEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	btnlogin.click();

WDS.sampleResult.sampleEnd()
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@_AR20400_ScreenLoad" enabled="true">
          <stringProp name="TestPlan.comments">gridcell</stringProp>
          <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 10)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;


function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	

// KeyVerify
// Set timeout = 20s
WDS.browser.manage().timeouts().pageLoadTimeout(20, timeunit.SECONDS);
var flag =0 ;
var Status=1 ;// default is Doneload
vars.put(flag,0)

WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;${ServerURLs}/${AR20400}&apos;);	
wait.until(conditions.presenceOfElementLocated(pkg.By.id(&apos;menuClickbtnRefresh-btnWrap&apos;)));// wait key appear
do {
	try {	
		wait.until(conditions.invisibilityOfElementLocated(pkg.By.linkText(&apos;... vui&apos;)));		
		//wait.until(ExpectedConditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@role, &apos;gridcell&apos;)]&quot;)));	
		wait.until(ExpectedConditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@id, &apos;cboClassId-inputEl&apos;)]&quot;)));	
		WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   chua load xong :&apos;);			
		}
	catch(exc) {
		stvwait(100);
		flag++
		//WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Khong the click ,đang lock :&apos; + cboPriceID);
		//vars.put(Status,1)
		}
				
} while (flag&lt;3)


if(${ClickKey}==1)
	{
	//var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@role, &apos;gridcell&apos;)]&quot;)));
	var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@id, &apos;cboClassId-inputEl&apos;)]&quot;)));
	cboKey.click();
	WDS.sampleResult.sampleEnd()	
	}
else
	{
		WDS.sampleResult.sampleEnd()	
	}

WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Done load, elementToBeClickable :&apos; + cboKey);


//WDS.sampleResult.sampleEnd()

//screenshot.renameTo(new java.io.File(&apos;${SA00001}_${DateExc}_Screenload.png&apos;))
var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
FileControl.copyFile(screenshot, new File(&quot;ImgResult/${ProjectCode}/${DateExc}/${AR20400}/&quot; + &apos;${AR20400}_${DateExc}_Screenload.png&apos;));



</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">3000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="AR24100" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">2000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc -Config Driver" enabled="true">
          <stringProp name="TestPlan.comments">Config Chrome</stringProp>
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host">localhost</stringProp>
          <intProp name="WebDriverConfig.http_port">8888</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">false</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">true</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">true</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">StvDriver\chromedriver.exe</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.insecurecerts_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="KeyVerifyBySI20700" elementType="Argument">
              <stringProp name="Argument.name">KeyVerifyBySI20700</stringProp>
              <stringProp name="Argument.value">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc -AP20200_Login" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;https://portal.hqsoft.vn:7443/PhaNamPerform/&apos;);
WDS.browser.get(&apos;${ServerURLs}/&apos;);	
// Input UserName
	var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtUserName-inputEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	txtUserName.click();
	txtUserName.sendKeys(&quot;${UserName}&quot;);
// Input P@ssw0rd
	var txtPassword= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtPassword-inputEl&quot;));
	txtPassword.click();
	txtPassword.sendKeys(&quot;${PassWord}&quot;);
// Click Login
	var btnlogin= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;btnLogin-btnIconEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	btnlogin.click();

WDS.sampleResult.sampleEnd()
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@_AP20200_ScreenLoad" enabled="true">
          <stringProp name="TestPlan.comments">gridcell</stringProp>
          <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 10)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;


function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	

// KeyVerify
// Set timeout = 20s
WDS.browser.manage().timeouts().pageLoadTimeout(20, timeunit.SECONDS);
var flag =0 ;
var Status=1 ;// default is Doneload
vars.put(flag,0)

WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;${ServerURLs}/${AP20200}&apos;);	
wait.until(conditions.presenceOfElementLocated(pkg.By.id(&apos;menuClickbtnRefresh-btnWrap&apos;)));// wait key appear
//do {
	try {	
		wait.until(conditions.invisibilityOfElementLocated(pkg.By.linkText(&apos;... vui&apos;)));		
		//wait.until(ExpectedConditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@role, &apos;gridcell&apos;)]&quot;)));	
		wait.until(ExpectedConditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@id, &apos;txtName-inputEl&apos;)]&quot;)));	
		WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   chua load xong :&apos;);			
		}
	catch(exc) {
		stvwait(100);
		flag++
		//WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Khong the click ,đang lock :&apos; + cboPriceID);
		//vars.put(Status,1)
		}
				
//} while (flag&lt;3)


if(${ClickKey}==1)
	{
	//var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@role, &apos;gridcell&apos;)]&quot;)));
	var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@id, &apos;txtName-inputEl&apos;)]&quot;)));
	cboKey.click();
	WDS.sampleResult.sampleEnd()	
	}
else
	{
		WDS.sampleResult.sampleEnd()	
	}

WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Done load, elementToBeClickable :&apos; + cboKey);


//WDS.sampleResult.sampleEnd()

//screenshot.renameTo(new java.io.File(&apos;${SA00001}_${DateExc}_Screenload.png&apos;))
var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
FileControl.copyFile(screenshot, new File(&quot;ImgResult/${ProjectCode}/${DateExc}/${AP20200}/&quot; + &apos;${AP20200}_${DateExc}_Screenload.png&apos;));



</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">3000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="AP20200" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">2000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc -Config Driver" enabled="true">
          <stringProp name="TestPlan.comments">Config Chrome</stringProp>
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host">localhost</stringProp>
          <intProp name="WebDriverConfig.http_port">8888</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">false</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">true</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">true</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">StvDriver\chromedriver.exe</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.insecurecerts_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="KeyVerifyBySI20700" elementType="Argument">
              <stringProp name="Argument.name">KeyVerifyBySI20700</stringProp>
              <stringProp name="Argument.value">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc -AR24100_Login" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;https://portal.hqsoft.vn:7443/PhaNamPerform/&apos;);
WDS.browser.get(&apos;${ServerURLs}/&apos;);	
// Input UserName
	var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtUserName-inputEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	txtUserName.click();
	txtUserName.sendKeys(&quot;${UserName}&quot;);
// Input P@ssw0rd
	var txtPassword= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtPassword-inputEl&quot;));
	txtPassword.click();
	txtPassword.sendKeys(&quot;${PassWord}&quot;);
// Click Login
	var btnlogin= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;btnLogin-btnIconEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	btnlogin.click();

WDS.sampleResult.sampleEnd()
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@_AR24100_ScreenLoad" enabled="true">
          <stringProp name="TestPlan.comments">gridcell</stringProp>
          <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 10)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;


function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	

// KeyVerify
// Set timeout = 20s
WDS.browser.manage().timeouts().pageLoadTimeout(20, timeunit.SECONDS);
var flag =0 ;
var Status=1 ;// default is Doneload
vars.put(flag,0)

WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;${ServerURLs}/${AR24100}&apos;);	
wait.until(conditions.presenceOfElementLocated(pkg.By.id(&apos;menuClickbtnRefresh-btnWrap&apos;)));// wait key appear
//do {
	try {	
		wait.until(conditions.invisibilityOfElementLocated(pkg.By.linkText(&apos;... vui&apos;)));		
		//wait.until(ExpectedConditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@role, &apos;gridcell&apos;)]&quot;)));	
		wait.until(ExpectedConditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@id, &apos;cboTerritory-inputEl&apos;)]&quot;)));	
		WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   chua load xong :&apos;);			
		}
	catch(exc) {
		stvwait(100);
		flag++
		//WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Khong the click ,đang lock :&apos; + cboPriceID);
		//vars.put(Status,1)
		}
				
//} while (flag&lt;3)


if(${ClickKey}==1)
	{
	//var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@role, &apos;gridcell&apos;)]&quot;)));
	var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@id, &apos;cboTerritory-inputEl&apos;)]&quot;)));
	cboKey.click();
	WDS.sampleResult.sampleEnd()	
	}
else
	{
		WDS.sampleResult.sampleEnd()	
	}

WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Done load, elementToBeClickable :&apos; + cboKey);


//WDS.sampleResult.sampleEnd()

//screenshot.renameTo(new java.io.File(&apos;${SA00001}_${DateExc}_Screenload.png&apos;))
var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
FileControl.copyFile(screenshot, new File(&quot;ImgResult/${ProjectCode}/${DateExc}/${AR24100}/&quot; + &apos;${AR24100}_${DateExc}_Screenload.png&apos;));



</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">3000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="AR20500" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">2000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc -Config Driver" enabled="true">
          <stringProp name="TestPlan.comments">Config Chrome</stringProp>
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host">localhost</stringProp>
          <intProp name="WebDriverConfig.http_port">8888</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">false</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">true</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">true</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">StvDriver\chromedriver.exe</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.insecurecerts_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="KeyVerifyBySI20700" elementType="Argument">
              <stringProp name="Argument.name">KeyVerifyBySI20700</stringProp>
              <stringProp name="Argument.value">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc -AR20500_Login" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;https://portal.hqsoft.vn:7443/PhaNamPerform/&apos;);
WDS.browser.get(&apos;${ServerURLs}/&apos;);	
// Input UserName
	var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtUserName-inputEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	txtUserName.click();
	txtUserName.sendKeys(&quot;${UserName}&quot;);
// Input P@ssw0rd
	var txtPassword= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtPassword-inputEl&quot;));
	txtPassword.click();
	txtPassword.sendKeys(&quot;${PassWord}&quot;);
// Click Login
	var btnlogin= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;btnLogin-btnIconEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	btnlogin.click();

WDS.sampleResult.sampleEnd()
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@_AR20500_ScreenLoad" enabled="true">
          <stringProp name="TestPlan.comments">gridcell</stringProp>
          <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 10)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;


function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	

// KeyVerify
// Set timeout = 20s
WDS.browser.manage().timeouts().pageLoadTimeout(20, timeunit.SECONDS);
var flag =0 ;
var Status=1 ;// default is Doneload
vars.put(flag,0)

WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;${ServerURLs}/${AR20500}&apos;);	
wait.until(conditions.presenceOfElementLocated(pkg.By.id(&apos;menuClickbtnRefresh-btnWrap&apos;)));// wait key appear
//do {
	try {	
		wait.until(conditions.invisibilityOfElementLocated(pkg.By.linkText(&apos;... vui&apos;)));		
		//wait.until(ExpectedConditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@role, &apos;gridcell&apos;)]&quot;)));	
		wait.until(ExpectedConditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@id, &apos;cboCpnyID-inputEl&apos;)]&quot;)));	
		WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   chua load xong :&apos;);			
		}
	catch(exc) {
		stvwait(100);
		flag++
		//WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Khong the click ,đang lock :&apos; + cboPriceID);
		//vars.put(Status,1)
		}
				
//} while (flag&lt;3)


if(${ClickKey}==1)
	{
	//var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@role, &apos;gridcell&apos;)]&quot;)));
	var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@id, &apos;cboCpnyID-inputEl&apos;)]&quot;)));
	cboKey.click();
	WDS.sampleResult.sampleEnd()	
	}
else
	{
		WDS.sampleResult.sampleEnd()	
	}

WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Done load, elementToBeClickable :&apos; + cboKey);


//WDS.sampleResult.sampleEnd()

//screenshot.renameTo(new java.io.File(&apos;${SA00001}_${DateExc}_Screenload.png&apos;))
var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
FileControl.copyFile(screenshot, new File(&quot;ImgResult/${ProjectCode}/${DateExc}/${AR20500}/&quot; + &apos;${AR20500}_${DateExc}_Screenload.png&apos;));



</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">3000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="OM28900" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">2000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc -Config Driver" enabled="true">
          <stringProp name="TestPlan.comments">Config Chrome</stringProp>
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host">localhost</stringProp>
          <intProp name="WebDriverConfig.http_port">8888</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">false</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">true</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">true</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">StvDriver\chromedriver.exe</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.insecurecerts_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="KeyVerifyBySI20700" elementType="Argument">
              <stringProp name="Argument.name">KeyVerifyBySI20700</stringProp>
              <stringProp name="Argument.value">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc -OM28900_Login" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;https://portal.hqsoft.vn:7443/PhaNamPerform/&apos;);
WDS.browser.get(&apos;${ServerURLs}/&apos;);	
// Input UserName
	var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtUserName-inputEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	txtUserName.click();
	txtUserName.sendKeys(&quot;${UserName}&quot;);
// Input P@ssw0rd
	var txtPassword= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtPassword-inputEl&quot;));
	txtPassword.click();
	txtPassword.sendKeys(&quot;${PassWord}&quot;);
// Click Login
	var btnlogin= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;btnLogin-btnIconEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	btnlogin.click();

WDS.sampleResult.sampleEnd()
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@_OM28900_ScreenLoad" enabled="true">
          <stringProp name="TestPlan.comments">gridcell</stringProp>
          <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 10)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;


function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	

// KeyVerify
// Set timeout = 20s
WDS.browser.manage().timeouts().pageLoadTimeout(20, timeunit.SECONDS);
var flag =0 ;
var Status=1 ;// default is Doneload
vars.put(flag,0)

WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;${ServerURLs}/${OM28900}&apos;);	
wait.until(conditions.presenceOfElementLocated(pkg.By.id(&apos;menuClickbtnRefresh-btnWrap&apos;)));// wait key appear
//do {
	try {	
		wait.until(conditions.invisibilityOfElementLocated(pkg.By.linkText(&apos;... vui&apos;)));		
		wait.until(ExpectedConditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@role, &apos;gridcell&apos;)]&quot;)));	
		//wait.until(ExpectedConditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@id, &apos;cboCpnyID-inputEl&apos;)]&quot;)));	
		WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   chua load xong :&apos;);			
		}
	catch(exc) {
		stvwait(100);
		flag++
		//WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Khong the click ,đang lock :&apos; + cboPriceID);
		//vars.put(Status,1)
		}
				
//} while (flag&lt;3)


if(${ClickKey}==1)
	{
	var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@role, &apos;gridcell&apos;)]&quot;)));
	//var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@id, &apos;cboCpnyID-inputEl&apos;)]&quot;)));
	cboKey.click();
	WDS.sampleResult.sampleEnd()	
	}
else
	{
		WDS.sampleResult.sampleEnd()	
	}

WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Done load, elementToBeClickable :&apos; + cboKey);


//WDS.sampleResult.sampleEnd()

//screenshot.renameTo(new java.io.File(&apos;${SA00001}_${DateExc}_Screenload.png&apos;))
var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
FileControl.copyFile(screenshot, new File(&quot;ImgResult/${ProjectCode}/${DateExc}/${OM28900}/&quot; + &apos;${OM28900}_${DateExc}_Screenload.png&apos;));



</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">3000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="OM21600" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">2000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc -Config Driver" enabled="true">
          <stringProp name="TestPlan.comments">Config Chrome</stringProp>
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host">localhost</stringProp>
          <intProp name="WebDriverConfig.http_port">8888</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">false</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">true</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">true</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">StvDriver\chromedriver.exe</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.insecurecerts_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="KeyVerifyBySI20700" elementType="Argument">
              <stringProp name="Argument.name">KeyVerifyBySI20700</stringProp>
              <stringProp name="Argument.value">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc -OM21600_Login" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;https://portal.hqsoft.vn:7443/PhaNamPerform/&apos;);
WDS.browser.get(&apos;${ServerURLs}/&apos;);	
// Input UserName
	var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtUserName-inputEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	txtUserName.click();
	txtUserName.sendKeys(&quot;${UserName}&quot;);
// Input P@ssw0rd
	var txtPassword= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtPassword-inputEl&quot;));
	txtPassword.click();
	txtPassword.sendKeys(&quot;${PassWord}&quot;);
// Click Login
	var btnlogin= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;btnLogin-btnIconEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	btnlogin.click();

WDS.sampleResult.sampleEnd()
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@_OM21600_ScreenLoad" enabled="true">
          <stringProp name="TestPlan.comments">gridcell</stringProp>
          <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 10)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;


function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	

// KeyVerify
// Set timeout = 20s
WDS.browser.manage().timeouts().pageLoadTimeout(20, timeunit.SECONDS);
var flag =0 ;
var Status=1 ;// default is Doneload
vars.put(flag,0)

WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;${ServerURLs}/${OM21600}&apos;);	
wait.until(conditions.presenceOfElementLocated(pkg.By.id(&apos;menuClickbtnRefresh-btnWrap&apos;)));// wait key appear
//do {
	try {	
		wait.until(conditions.invisibilityOfElementLocated(pkg.By.linkText(&apos;... vui&apos;)));		
		wait.until(ExpectedConditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@role, &apos;gridcell&apos;)]&quot;)));	
		//wait.until(ExpectedConditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@id, &apos;cboCpnyID-inputEl&apos;)]&quot;)));	
		WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   chua load xong :&apos;);			
		}
	catch(exc) {
		stvwait(100);
		flag++
		//WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Khong the click ,đang lock :&apos; + cboPriceID);
		//vars.put(Status,1)
		}
				
//} while (flag&lt;3)


if(${ClickKey}==1)
	{
	var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@role, &apos;gridcell&apos;)]&quot;)));
	//var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@id, &apos;cboCpnyID-inputEl&apos;)]&quot;)));
	cboKey.click();
	WDS.sampleResult.sampleEnd()	
	}
else
	{
		WDS.sampleResult.sampleEnd()	
	}

WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Done load, elementToBeClickable :&apos; + cboKey);


//WDS.sampleResult.sampleEnd()

//screenshot.renameTo(new java.io.File(&apos;${SA00001}_${DateExc}_Screenload.png&apos;))
var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
FileControl.copyFile(screenshot, new File(&quot;ImgResult/${ProjectCode}/${DateExc}/${OM21600}/&quot; + &apos;${OM21600}_${DateExc}_Screenload.png&apos;));



</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">3000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="OM29000" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">2000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc -Config Driver" enabled="true">
          <stringProp name="TestPlan.comments">Config Chrome</stringProp>
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host">localhost</stringProp>
          <intProp name="WebDriverConfig.http_port">8888</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">false</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">true</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">true</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">StvDriver\chromedriver.exe</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.insecurecerts_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="KeyVerifyBySI20700" elementType="Argument">
              <stringProp name="Argument.name">KeyVerifyBySI20700</stringProp>
              <stringProp name="Argument.value">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc -OM29000_Login" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;https://portal.hqsoft.vn:7443/PhaNamPerform/&apos;);
WDS.browser.get(&apos;${ServerURLs}/&apos;);	
// Input UserName
	var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtUserName-inputEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	txtUserName.click();
	txtUserName.sendKeys(&quot;${UserName}&quot;);
// Input P@ssw0rd
	var txtPassword= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtPassword-inputEl&quot;));
	txtPassword.click();
	txtPassword.sendKeys(&quot;${PassWord}&quot;);
// Click Login
	var btnlogin= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;btnLogin-btnIconEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	btnlogin.click();

WDS.sampleResult.sampleEnd()
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@_OM29000_ScreenLoad" enabled="true">
          <stringProp name="TestPlan.comments">gridcell</stringProp>
          <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 10)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;


function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	

// KeyVerify
// Set timeout = 20s
WDS.browser.manage().timeouts().pageLoadTimeout(20, timeunit.SECONDS);
var flag =0 ;
var Status=1 ;// default is Doneload
vars.put(flag,0)

WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;${ServerURLs}/${OM29000}&apos;);	
wait.until(conditions.presenceOfElementLocated(pkg.By.id(&apos;menuClickbtnRefresh-btnWrap&apos;)));// wait key appear
//do {
	try {	
		wait.until(conditions.invisibilityOfElementLocated(pkg.By.linkText(&apos;... vui&apos;)));		
		wait.until(ExpectedConditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@role, &apos;gridcell&apos;)]&quot;)));	
		//wait.until(ExpectedConditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@id, &apos;cboCpnyID-inputEl&apos;)]&quot;)));	
		WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   chua load xong :&apos;);			
		}
	catch(exc) {
		stvwait(100);
		flag++
		//WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Khong the click ,đang lock :&apos; + cboPriceID);
		//vars.put(Status,1)
		}
				
//} while (flag&lt;3)


if(${ClickKey}==1)
	{
	var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@role, &apos;gridcell&apos;)]&quot;)));
	//var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@id, &apos;cboCpnyID-inputEl&apos;)]&quot;)));
	cboKey.click();
	WDS.sampleResult.sampleEnd()	
	}
else
	{
		WDS.sampleResult.sampleEnd()	
	}

WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Done load, elementToBeClickable :&apos; + cboKey);


//WDS.sampleResult.sampleEnd()

//screenshot.renameTo(new java.io.File(&apos;${SA00001}_${DateExc}_Screenload.png&apos;))
var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
FileControl.copyFile(screenshot, new File(&quot;ImgResult/${ProjectCode}/${DateExc}/${OM29000}/&quot; + &apos;${OM29000}_${DateExc}_Screenload.png&apos;));



</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">3000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="OM28600" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">2000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc -Config Driver" enabled="true">
          <stringProp name="TestPlan.comments">Config Chrome</stringProp>
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host">localhost</stringProp>
          <intProp name="WebDriverConfig.http_port">8888</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">false</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">true</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">true</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">StvDriver\chromedriver.exe</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.insecurecerts_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="KeyVerifyBySI20700" elementType="Argument">
              <stringProp name="Argument.name">KeyVerifyBySI20700</stringProp>
              <stringProp name="Argument.value">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc -OM28600_Login" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;https://portal.hqsoft.vn:7443/PhaNamPerform/&apos;);
WDS.browser.get(&apos;${ServerURLs}/&apos;);	
// Input UserName
	var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtUserName-inputEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	txtUserName.click();
	txtUserName.sendKeys(&quot;${UserName}&quot;);
// Input P@ssw0rd
	var txtPassword= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtPassword-inputEl&quot;));
	txtPassword.click();
	txtPassword.sendKeys(&quot;${PassWord}&quot;);
// Click Login
	var btnlogin= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;btnLogin-btnIconEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	btnlogin.click();

WDS.sampleResult.sampleEnd()
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@_OM28600_ScreenLoad" enabled="true">
          <stringProp name="TestPlan.comments">gridcell</stringProp>
          <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 10)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;


function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	

// KeyVerify
// Set timeout = 20s
WDS.browser.manage().timeouts().pageLoadTimeout(20, timeunit.SECONDS);
var flag =0 ;
var Status=1 ;// default is Doneload
vars.put(flag,0)

WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;${ServerURLs}/${OM28600}&apos;);	
wait.until(conditions.presenceOfElementLocated(pkg.By.id(&apos;menuClickbtnRefresh-btnWrap&apos;)));// wait key appear
do {
	try {	
		wait.until(conditions.invisibilityOfElementLocated(pkg.By.linkText(&apos;... vui&apos;)));		
		wait.until(ExpectedConditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@role, &apos;gridcell&apos;)]&quot;)));	
		//wait.until(ExpectedConditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@id, &apos;cboCpnyID-inputEl&apos;)]&quot;)));	
		WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   chua load xong :&apos;);			
		}
	catch(exc) {
		stvwait(100);
		flag++
		//WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Khong the click ,đang lock :&apos; + cboPriceID);
		//vars.put(Status,1)
		}
				
} while (flag&lt;3)


if(${ClickKey}==1)
	{
	var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@role, &apos;gridcell&apos;)]&quot;)));
	//var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@id, &apos;cboCpnyID-inputEl&apos;)]&quot;)));
	cboKey.click();
	WDS.sampleResult.sampleEnd()	
	}
else
	{
		WDS.sampleResult.sampleEnd()	
	}

WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Done load, elementToBeClickable :&apos; + cboKey);


//WDS.sampleResult.sampleEnd()

//screenshot.renameTo(new java.io.File(&apos;${SA00001}_${DateExc}_Screenload.png&apos;))
var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
FileControl.copyFile(screenshot, new File(&quot;ImgResult/${ProjectCode}/${DateExc}/${OM28600}/&quot; + &apos;${OM28600}_${DateExc}_Screenload.png&apos;));



</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">3000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="OM22001" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">2000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc -Config Driver" enabled="true">
          <stringProp name="TestPlan.comments">Config Chrome</stringProp>
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host">localhost</stringProp>
          <intProp name="WebDriverConfig.http_port">8888</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">false</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">true</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">true</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">StvDriver\chromedriver.exe</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.insecurecerts_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="KeyVerifyBySI20700" elementType="Argument">
              <stringProp name="Argument.name">KeyVerifyBySI20700</stringProp>
              <stringProp name="Argument.value">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc -OM22001_Login" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;https://portal.hqsoft.vn:7443/PhaNamPerform/&apos;);
WDS.browser.get(&apos;${ServerURLs}/&apos;);	
// Input UserName
	var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtUserName-inputEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	txtUserName.click();
	txtUserName.sendKeys(&quot;${UserName}&quot;);
// Input P@ssw0rd
	var txtPassword= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtPassword-inputEl&quot;));
	txtPassword.click();
	txtPassword.sendKeys(&quot;${PassWord}&quot;);
// Click Login
	var btnlogin= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;btnLogin-btnIconEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	btnlogin.click();

WDS.sampleResult.sampleEnd()
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@_OM22001_ScreenLoad" enabled="true">
          <stringProp name="TestPlan.comments">gridcell</stringProp>
          <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 20)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;


function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	
var maxtime=0
// KeyVerify
// Set timeout = 20s
WDS.browser.manage().timeouts().pageLoadTimeout(20, timeunit.SECONDS);
var flag =0 ;
var Status=0 ;// default is notyet
vars.put(flag,0)

WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;${ServerURLs}/${OM22001}&apos;);	
wait.until(conditions.presenceOfElementLocated(pkg.By.id(&apos;Event.Form.menuClickbtnRefresh-btnEl&apos;)));// wait key appear
		
//var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@role, &apos;gridcell&apos;)]&quot;)));		
var chkmask=null	
try {
	do {
		WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   chua load xong :&apos; + chkmask);	
		var chkmask= WDS.browser.findElement(pkg.By.xpath(&quot;//*[contains(@class,&apos;x-mask&apos;)]&quot;));
		//wait.until(conditions.invisibilityOfElementLocated(pkg.By.linkText(&apos;... vui&apos;)));
		//wait.until(ExpectedConditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@id,&apos;cboApplyType-triggerWrap&apos;)]/tbody/tr/td[3]/div&quot;)));	
		wait.until(conditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@id,&apos;cboApplyType-triggerWrap&apos;)]/tbody/tr/td[3]/div&quot;)));	
		}while (chkmask!=null)
}catch(exc)
	{	
		vars.put(chkmask,0)//unmask
		WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    unmask :&apos; + chkmask);
		}


WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    check mask :&apos; + chkmask);

if(${ClickKey}==1)
	{
	//var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@role, &apos;gridcell&apos;)]&quot;)));
	var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@id,&apos;cboApplyType-triggerWrap&apos;)]/tbody/tr/td[3]/div&quot;)));
	cboKey.click();
	WDS.sampleResult.sampleEnd()	
	}
else
	{
		WDS.sampleResult.sampleEnd()	
	}

WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Done load, elementToBeClickable :&apos; + cboKey);


//WDS.sampleResult.sampleEnd()

//screenshot.renameTo(new java.io.File(&apos;${SA00001}_${DateExc}_Screenload.png&apos;))
var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
FileControl.copyFile(screenshot, new File(&quot;ImgResult/${ProjectCode}/${DateExc}/${OM22001}/&quot; + &apos;${OM22001}_${DateExc}_Screenload.png&apos;));



</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">3000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="OM22002" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">2000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc -Config Driver" enabled="true">
          <stringProp name="TestPlan.comments">Config Chrome</stringProp>
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host">localhost</stringProp>
          <intProp name="WebDriverConfig.http_port">8888</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">false</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">true</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">true</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">StvDriver\chromedriver.exe</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.insecurecerts_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="KeyVerifyBySI20700" elementType="Argument">
              <stringProp name="Argument.name">KeyVerifyBySI20700</stringProp>
              <stringProp name="Argument.value">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc -OM22002_Login" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;https://portal.hqsoft.vn:7443/PhaNamPerform/&apos;);
WDS.browser.get(&apos;${ServerURLs}/&apos;);	
// Input UserName
	var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtUserName-inputEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	txtUserName.click();
	txtUserName.sendKeys(&quot;${UserName}&quot;);
// Input P@ssw0rd
	var txtPassword= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtPassword-inputEl&quot;));
	txtPassword.click();
	txtPassword.sendKeys(&quot;${PassWord}&quot;);
// Click Login
	var btnlogin= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;btnLogin-btnIconEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	btnlogin.click();

WDS.sampleResult.sampleEnd()
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@_OM22002_ScreenLoad" enabled="true">
          <stringProp name="TestPlan.comments">gridcell</stringProp>
          <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 20)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;


function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	
var maxtime=0
// KeyVerify
// Set timeout = 20s
WDS.browser.manage().timeouts().pageLoadTimeout(20, timeunit.SECONDS);
var flag =0 ;
var Status=0 ;// default is notyet
vars.put(flag,0)

WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;${ServerURLs}/${OM22002}&apos;);	
wait.until(conditions.presenceOfElementLocated(pkg.By.id(&apos;Event.Form.menuClickbtnRefresh-btnEl&apos;)));// wait key appear
		
//var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@role, &apos;gridcell&apos;)]&quot;)));		
var chkmask=null	
try {
	do {
		WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   chua load xong :&apos; + chkmask);	
		var chkmask= WDS.browser.findElement(pkg.By.xpath(&quot;//*[contains(@class,&apos;x-mask&apos;)]&quot;));
		//wait.until(conditions.invisibilityOfElementLocated(pkg.By.linkText(&apos;... vui&apos;)));
		//wait.until(ExpectedConditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@id,&apos;cboApplyType-triggerWrap&apos;)]/tbody/tr/td[3]/div&quot;)));	
		wait.until(conditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@id,&apos;cboTerritory-triggerWrap&apos;)]/tbody/tr/td[3]&quot;)));	
		}while (chkmask!=null)
}catch(exc)
	{	
		vars.put(chkmask,0)//unmask
		WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    unmask :&apos; + chkmask);
		}


WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    check mask :&apos; + chkmask);

if(${ClickKey}==1)
	{
	//var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@role, &apos;gridcell&apos;)]&quot;)));
	var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@id,&apos;cboTerritory-triggerWrap&apos;)]/tbody/tr/td[3]&quot;)));
	cboKey.click();
	WDS.sampleResult.sampleEnd()	
	}
else
	{
		WDS.sampleResult.sampleEnd()	
	}

WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Done load, elementToBeClickable :&apos; + cboKey);


//WDS.sampleResult.sampleEnd()

//screenshot.renameTo(new java.io.File(&apos;${SA00001}_${DateExc}_Screenload.png&apos;))
var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
FileControl.copyFile(screenshot, new File(&quot;ImgResult/${ProjectCode}/${DateExc}/${OM22002}/&quot; + &apos;${OM22002}_${DateExc}_Screenload.png&apos;));



</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">3000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="OM41200" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">2000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc -Config Driver" enabled="true">
          <stringProp name="TestPlan.comments">Config Chrome</stringProp>
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host">localhost</stringProp>
          <intProp name="WebDriverConfig.http_port">8888</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">false</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">true</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">true</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">StvDriver\chromedriver.exe</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.insecurecerts_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="KeyVerifyBySI20700" elementType="Argument">
              <stringProp name="Argument.name">KeyVerifyBySI20700</stringProp>
              <stringProp name="Argument.value">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc -OM41200_Login" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;https://portal.hqsoft.vn:7443/PhaNamPerform/&apos;);
WDS.browser.get(&apos;${ServerURLs}/&apos;);	
// Input UserName
	var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtUserName-inputEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	txtUserName.click();
	txtUserName.sendKeys(&quot;${UserName}&quot;);
// Input P@ssw0rd
	var txtPassword= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtPassword-inputEl&quot;));
	txtPassword.click();
	txtPassword.sendKeys(&quot;${PassWord}&quot;);
// Click Login
	var btnlogin= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;btnLogin-btnIconEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	btnlogin.click();

WDS.sampleResult.sampleEnd()
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@_OM41200_ScreenLoad" enabled="true">
          <stringProp name="TestPlan.comments">gridcell</stringProp>
          <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 20)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;


function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	
var maxtime=0
// KeyVerify
// Set timeout = 20s
WDS.browser.manage().timeouts().pageLoadTimeout(20, timeunit.SECONDS);
var flag =0 ;
var Status=0 ;// default is notyet
vars.put(flag,0)

WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;${ServerURLs}/${OM41200}&apos;);	
wait.until(conditions.presenceOfElementLocated(pkg.By.id(&apos;Event.Form.menuClickbtnRefresh-btnEl&apos;)));// wait key appear
		
//var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@role, &apos;gridcell&apos;)]&quot;)));		
var chkmask=null	
try {
	do {
		WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   chua load xong :&apos; + chkmask);	
		var chkmask= WDS.browser.findElement(pkg.By.xpath(&quot;//*[contains(@class,&apos;x-mask&apos;)]&quot;));
		//wait.until(conditions.invisibilityOfElementLocated(pkg.By.linkText(&apos;... vui&apos;)));
		//wait.until(ExpectedConditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@id,&apos;cboApplyType-triggerWrap&apos;)]/tbody/tr/td[3]/div&quot;)));	
		wait.until(conditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@id,&apos;cboCpny-triggerWrap&apos;)]/tbody/tr/td[3]&quot;)));	
		}while (chkmask!=null)
}catch(exc)
	{	
		vars.put(chkmask,0)//unmask
		WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    unmask :&apos; + chkmask);
		}


WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    check mask :&apos; + chkmask);

if(${ClickKey}==1)
	{
	//var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@role, &apos;gridcell&apos;)]&quot;)));
	var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@id,&apos;cboCpny-triggerWrap&apos;)]/tbody/tr/td[3]&quot;)));
	cboKey.click();
	WDS.sampleResult.sampleEnd()	
	}
else
	{
		WDS.sampleResult.sampleEnd()	
	}

WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Done load, elementToBeClickable :&apos; + cboKey);


//WDS.sampleResult.sampleEnd()

//screenshot.renameTo(new java.io.File(&apos;${SA00001}_${DateExc}_Screenload.png&apos;))
var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
FileControl.copyFile(screenshot, new File(&quot;ImgResult/${ProjectCode}/${DateExc}/${OM41200}/&quot; + &apos;${OM41200}_${DateExc}_Screenload.png&apos;));



</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">3000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="OM22003" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">2000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc -Config Driver" enabled="true">
          <stringProp name="TestPlan.comments">Config Chrome</stringProp>
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host">localhost</stringProp>
          <intProp name="WebDriverConfig.http_port">8888</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">false</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">true</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">true</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">StvDriver\chromedriver.exe</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.insecurecerts_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="KeyVerifyBySI20700" elementType="Argument">
              <stringProp name="Argument.name">KeyVerifyBySI20700</stringProp>
              <stringProp name="Argument.value">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc -OM22003_Login" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;https://portal.hqsoft.vn:7443/PhaNamPerform/&apos;);
WDS.browser.get(&apos;${ServerURLs}/&apos;);	
// Input UserName
	var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtUserName-inputEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	txtUserName.click();
	txtUserName.sendKeys(&quot;${UserName}&quot;);
// Input P@ssw0rd
	var txtPassword= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtPassword-inputEl&quot;));
	txtPassword.click();
	txtPassword.sendKeys(&quot;${PassWord}&quot;);
// Click Login
	var btnlogin= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;btnLogin-btnIconEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	btnlogin.click();

WDS.sampleResult.sampleEnd()
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@_OM22003_ScreenLoad" enabled="true">
          <stringProp name="TestPlan.comments">gridcell</stringProp>
          <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 20)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;


function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	
var maxtime=0
// KeyVerify
// Set timeout = 20s
WDS.browser.manage().timeouts().pageLoadTimeout(20, timeunit.SECONDS);
var flag =0 ;
var Status=0 ;// default is notyet
vars.put(flag,0)

WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;${ServerURLs}/${OM22003}&apos;);	
wait.until(conditions.presenceOfElementLocated(pkg.By.id(&apos;menuClickbtnRefresh-btnEl&apos;)));// wait key appear
		
//var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@role, &apos;gridcell&apos;)]&quot;)));		
var chkmask=null	
try {
	do {
		WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   chua load xong :&apos; + chkmask);	
		var chkmask= WDS.browser.findElement(pkg.By.xpath(&quot;//*[contains(@class,&apos;x-mask&apos;)]&quot;));
		//wait.until(conditions.invisibilityOfElementLocated(pkg.By.linkText(&apos;... vui&apos;)));
		//wait.until(ExpectedConditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@id,&apos;cboApplyType-triggerWrap&apos;)]/tbody/tr/td[3]/div&quot;)));	
		wait.until(conditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@id,&apos;cboTerritory-triggerWrap&apos;)]/tbody/tr/td[3]&quot;)));	
		}while (chkmask!=null)
}catch(exc)
	{	
		vars.put(chkmask,0)//unmask
		WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    unmask :&apos; + chkmask);
		}


WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    check mask :&apos; + chkmask);

if(${ClickKey}==1)
	{
	//var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@role, &apos;gridcell&apos;)]&quot;)));
	var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@id,&apos;cboTerritory-triggerWrap&apos;)]/tbody/tr/td[3]&quot;)));
	cboKey.click();
	WDS.sampleResult.sampleEnd()	
	}
else
	{
		WDS.sampleResult.sampleEnd()	
	}

WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Done load, elementToBeClickable :&apos; + cboKey);


//WDS.sampleResult.sampleEnd()

//screenshot.renameTo(new java.io.File(&apos;${SA00001}_${DateExc}_Screenload.png&apos;))
var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
FileControl.copyFile(screenshot, new File(&quot;ImgResult/${ProjectCode}/${DateExc}/${OM22003}/&quot; + &apos;${OM22003}_${DateExc}_Screenload.png&apos;));



</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">3000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="IN22001" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">2000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc -Config Driver" enabled="true">
          <stringProp name="TestPlan.comments">Config Chrome</stringProp>
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host">localhost</stringProp>
          <intProp name="WebDriverConfig.http_port">8888</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">false</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">true</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">true</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">StvDriver\chromedriver.exe</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.insecurecerts_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="KeyVerifyBySI20700" elementType="Argument">
              <stringProp name="Argument.name">KeyVerifyBySI20700</stringProp>
              <stringProp name="Argument.value">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc -IN22001_Login" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;https://portal.hqsoft.vn:7443/PhaNamPerform/&apos;);
WDS.browser.get(&apos;${ServerURLs}/&apos;);	
// Input UserName
	var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtUserName-inputEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	txtUserName.click();
	txtUserName.sendKeys(&quot;${UserName}&quot;);
// Input P@ssw0rd
	var txtPassword= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtPassword-inputEl&quot;));
	txtPassword.click();
	txtPassword.sendKeys(&quot;${PassWord}&quot;);
// Click Login
	var btnlogin= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;btnLogin-btnIconEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	btnlogin.click();

WDS.sampleResult.sampleEnd()
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@_IN22001_ScreenLoad" enabled="true">
          <stringProp name="TestPlan.comments">gridcell</stringProp>
          <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 20)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;


function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	
var maxtime=0
// KeyVerify
// Set timeout = 20s
WDS.browser.manage().timeouts().pageLoadTimeout(20, timeunit.SECONDS);
var flag =0 ;
var Status=0 ;// default is notyet
vars.put(flag,0)

WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;${ServerURLs}/${IN22001}&apos;);	
wait.until(conditions.presenceOfElementLocated(pkg.By.id(&apos;Event.Form.menuClickbtnRefresh-btnIconEl&apos;)));// wait key appear
		
//var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@role, &apos;gridcell&apos;)]&quot;)));		
var chkmask=null	
try {
	do {
		WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   chua load xong :&apos; + chkmask);	
		var chkmask= WDS.browser.findElement(pkg.By.xpath(&quot;//*[contains(@class,&apos;x-mask&apos;)]&quot;));
		//wait.until(conditions.invisibilityOfElementLocated(pkg.By.linkText(&apos;... vui&apos;)));
		//wait.until(ExpectedConditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@id,&apos;cboApplyType-triggerWrap&apos;)]/tbody/tr/td[3]/div&quot;)));	
		wait.until(conditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@id,&apos;dtpToDate-triggerWrap&apos;)]/tbody/tr/td[2]&quot;)));	
		}while (chkmask!=null)
}catch(exc)
	{	
		vars.put(chkmask,0)//unmask
		WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    unmask :&apos; + chkmask);
		}


WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    check mask :&apos; + chkmask);

if(${ClickKey}==1)
	{
	//var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@role, &apos;gridcell&apos;)]&quot;)));
	var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@id,&apos;dtpToDate-triggerWrap&apos;)]/tbody/tr/td[2]&quot;)));
	cboKey.click();
	WDS.sampleResult.sampleEnd()	
	}
else
	{
		WDS.sampleResult.sampleEnd()	
	}

WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Done load, elementToBeClickable :&apos; + cboKey);


//WDS.sampleResult.sampleEnd()

//screenshot.renameTo(new java.io.File(&apos;${SA00001}_${DateExc}_Screenload.png&apos;))
var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
FileControl.copyFile(screenshot, new File(&quot;ImgResult/${ProjectCode}/${DateExc}/${IN22001}/&quot; + &apos;${IN22001}_${DateExc}_Screenload.png&apos;));



</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">3000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="IN22000" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">2000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc -Config Driver" enabled="true">
          <stringProp name="TestPlan.comments">Config Chrome</stringProp>
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host">localhost</stringProp>
          <intProp name="WebDriverConfig.http_port">8888</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">false</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">true</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">true</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">StvDriver\chromedriver.exe</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.insecurecerts_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="KeyVerifyBySI20700" elementType="Argument">
              <stringProp name="Argument.name">KeyVerifyBySI20700</stringProp>
              <stringProp name="Argument.value">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc -IN22000_Login" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;https://portal.hqsoft.vn:7443/PhaNamPerform/&apos;);
WDS.browser.get(&apos;${ServerURLs}/&apos;);	
// Input UserName
	var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtUserName-inputEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	txtUserName.click();
	txtUserName.sendKeys(&quot;${UserName}&quot;);
// Input P@ssw0rd
	var txtPassword= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtPassword-inputEl&quot;));
	txtPassword.click();
	txtPassword.sendKeys(&quot;${PassWord}&quot;);
// Click Login
	var btnlogin= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;btnLogin-btnIconEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	btnlogin.click();

WDS.sampleResult.sampleEnd()
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@_IN22000_ScreenLoad" enabled="true">
          <stringProp name="TestPlan.comments">gridcell</stringProp>
          <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 20)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;


function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	
var maxtime=0
// KeyVerify
// Set timeout = 20s
WDS.browser.manage().timeouts().pageLoadTimeout(20, timeunit.SECONDS);
var flag =0 ;
var Status=0 ;// default is notyet
vars.put(flag,0)

WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;${ServerURLs}/${IN22000}&apos;);	
wait.until(conditions.presenceOfElementLocated(pkg.By.id(&apos;Event.Form.menuClickbtnRefresh-btnIconEl&apos;)));// wait key appear
		
//var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@role, &apos;gridcell&apos;)]&quot;)));		
var chkmask=null	
try {
	do {
		WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   chua load xong :&apos; + chkmask);	
		var chkmask= WDS.browser.findElement(pkg.By.xpath(&quot;//*[contains(@class,&apos;x-mask&apos;)]&quot;));
		//wait.until(conditions.invisibilityOfElementLocated(pkg.By.linkText(&apos;... vui&apos;)));
		//wait.until(ExpectedConditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@id,&apos;cboApplyType-triggerWrap&apos;)]/tbody/tr/td[3]/div&quot;)));	
		wait.until(conditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@id,&apos;cboPosmID-triggerWrap&apos;)]/tbody/tr/td[3]&quot;)));	
		}while (chkmask!=null)
}catch(exc)
	{	
		vars.put(chkmask,0)//unmask
		WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    unmask :&apos; + chkmask);
		}


WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    check mask :&apos; + chkmask);

if(${ClickKey}==1)
	{
	//var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@role, &apos;gridcell&apos;)]&quot;)));
	var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@id,&apos;cboPosmID-triggerWrap&apos;)]/tbody/tr/td[3]&quot;)));
	cboKey.click();
	WDS.sampleResult.sampleEnd()	
	}
else
	{
		WDS.sampleResult.sampleEnd()	
	}

WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Done load, elementToBeClickable :&apos; + cboKey);


//WDS.sampleResult.sampleEnd()

//screenshot.renameTo(new java.io.File(&apos;${SA00001}_${DateExc}_Screenload.png&apos;))
var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
FileControl.copyFile(screenshot, new File(&quot;ImgResult/${ProjectCode}/${DateExc}/${IN22000}/&quot; + &apos;${IN22000}_${DateExc}_Screenload.png&apos;));



</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">3000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="IN23000" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">2000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc -Config Driver" enabled="true">
          <stringProp name="TestPlan.comments">Config Chrome</stringProp>
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host">localhost</stringProp>
          <intProp name="WebDriverConfig.http_port">8888</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">false</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">true</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">true</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">StvDriver\chromedriver.exe</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.insecurecerts_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="KeyVerifyBySI20700" elementType="Argument">
              <stringProp name="Argument.name">KeyVerifyBySI20700</stringProp>
              <stringProp name="Argument.value">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc -IN23000_Login" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;https://portal.hqsoft.vn:7443/PhaNamPerform/&apos;);
WDS.browser.get(&apos;${ServerURLs}/&apos;);	
// Input UserName
	var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtUserName-inputEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	txtUserName.click();
	txtUserName.sendKeys(&quot;${UserName}&quot;);
// Input P@ssw0rd
	var txtPassword= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtPassword-inputEl&quot;));
	txtPassword.click();
	txtPassword.sendKeys(&quot;${PassWord}&quot;);
// Click Login
	var btnlogin= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;btnLogin-btnIconEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	btnlogin.click();

WDS.sampleResult.sampleEnd()
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@_IN23000_ScreenLoad" enabled="true">
          <stringProp name="TestPlan.comments">gridcell</stringProp>
          <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 20)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;


function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	
var maxtime=0
// KeyVerify
// Set timeout = 20s
WDS.browser.manage().timeouts().pageLoadTimeout(20, timeunit.SECONDS);
var flag =0 ;
var Status=0 ;// default is notyet
vars.put(flag,0)

WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;${ServerURLs}/${IN23000}&apos;);	
wait.until(conditions.presenceOfElementLocated(pkg.By.id(&apos;Event.Form.menuClickbtnRefresh-btnIconEl&apos;)));// wait key appear
		
//var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@role, &apos;gridcell&apos;)]&quot;)));		
var chkmask=null	
try {
	do {
		WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   chua load xong :&apos; + chkmask);	
		var chkmask= WDS.browser.findElement(pkg.By.xpath(&quot;//*[contains(@class,&apos;x-mask&apos;)]&quot;));
		//wait.until(conditions.invisibilityOfElementLocated(pkg.By.linkText(&apos;... vui&apos;)));
		//wait.until(ExpectedConditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@id,&apos;cboApplyType-triggerWrap&apos;)]/tbody/tr/td[3]/div&quot;)));	
		wait.until(conditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@id,&apos;cboPosmID-triggerWrap&apos;)]/tbody/tr/td[3]&quot;)));	
		}while (chkmask!=null)
}catch(exc)
	{	
		vars.put(chkmask,0)//unmask
		WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    unmask :&apos; + chkmask);
		}


WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    check mask :&apos; + chkmask);

if(${ClickKey}==1)
	{
	//var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@role, &apos;gridcell&apos;)]&quot;)));
	var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@id,&apos;cboPosmID-triggerWrap&apos;)]/tbody/tr/td[3]&quot;)));
	cboKey.click();
	WDS.sampleResult.sampleEnd()	
	}
else
	{
		WDS.sampleResult.sampleEnd()	
	}

WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Done load, elementToBeClickable :&apos; + cboKey);


//WDS.sampleResult.sampleEnd()

//screenshot.renameTo(new java.io.File(&apos;${SA00001}_${DateExc}_Screenload.png&apos;))
var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
FileControl.copyFile(screenshot, new File(&quot;ImgResult/${ProjectCode}/${DateExc}/${IN23000}/&quot; + &apos;${IN23000}_${DateExc}_Screenload.png&apos;));



</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">3000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="OM21500" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">2000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc -Config Driver" enabled="true">
          <stringProp name="TestPlan.comments">Config Chrome</stringProp>
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host">localhost</stringProp>
          <intProp name="WebDriverConfig.http_port">8888</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">false</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">true</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">true</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">StvDriver\chromedriver.exe</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.insecurecerts_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="KeyVerifyBySI20700" elementType="Argument">
              <stringProp name="Argument.name">KeyVerifyBySI20700</stringProp>
              <stringProp name="Argument.value">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc -OM21500_Login" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;https://portal.hqsoft.vn:7443/PhaNamPerform/&apos;);
WDS.browser.get(&apos;${ServerURLs}/&apos;);	
// Input UserName
	var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtUserName-inputEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	txtUserName.click();
	txtUserName.sendKeys(&quot;${UserName}&quot;);
// Input P@ssw0rd
	var txtPassword= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtPassword-inputEl&quot;));
	txtPassword.click();
	txtPassword.sendKeys(&quot;${PassWord}&quot;);
// Click Login
	var btnlogin= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;btnLogin-btnIconEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	btnlogin.click();

WDS.sampleResult.sampleEnd()
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@_OM21500_ScreenLoad" enabled="true">
          <stringProp name="TestPlan.comments">gridcell</stringProp>
          <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 20)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;


function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	
var maxtime=0
// KeyVerify
// Set timeout = 20s
WDS.browser.manage().timeouts().pageLoadTimeout(20, timeunit.SECONDS);
var flag =0 ;
var Status=0 ;// default is notyet
vars.put(flag,0)

WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;${ServerURLs}/${OM21500}&apos;);	
wait.until(conditions.presenceOfElementLocated(pkg.By.id(&apos;menuClickFirstbtnRefresh&apos;)));// wait key appear
		
//var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@role, &apos;gridcell&apos;)]&quot;)));		
var chkmask=null	
try {
	do {
		WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   chua load xong :&apos; + chkmask);	
		var chkmask= WDS.browser.findElement(pkg.By.xpath(&quot;//*[contains(@class,&apos;x-mask&apos;)]&quot;));
		//wait.until(conditions.invisibilityOfElementLocated(pkg.By.linkText(&apos;... vui&apos;)));
		//wait.until(ExpectedConditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@id,&apos;cboApplyType-triggerWrap&apos;)]/tbody/tr/td[3]/div&quot;)));	
		wait.until(conditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@data-qtip,&apos;PageRefresh&apos;)]&quot;)));	
		}while (chkmask!=null)
}catch(exc)
	{	
		vars.put(chkmask,0)//unmask
		WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    unmask :&apos; + chkmask);
		}


WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    check mask :&apos; + chkmask);

if(${ClickKey}==1)
	{
	//var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@role, &apos;gridcell&apos;)]&quot;)));
	var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@data-qtip,&apos;PageRefresh&apos;)]&quot;)));
	cboKey.click();
	WDS.sampleResult.sampleEnd()	
	}
else
	{
		WDS.sampleResult.sampleEnd()	
	}

WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Done load, elementToBeClickable :&apos; + cboKey);


//WDS.sampleResult.sampleEnd()

//screenshot.renameTo(new java.io.File(&apos;${SA00001}_${DateExc}_Screenload.png&apos;))
var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
FileControl.copyFile(screenshot, new File(&quot;ImgResult/${ProjectCode}/${DateExc}/${OM21500}/&quot; + &apos;${OM21500}_${DateExc}_Screenload.png&apos;));



</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">3000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="OM27700" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">2000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc -Config Driver" enabled="true">
          <stringProp name="TestPlan.comments">Config Chrome</stringProp>
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host">localhost</stringProp>
          <intProp name="WebDriverConfig.http_port">8888</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">false</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">true</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">true</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">StvDriver\chromedriver.exe</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.insecurecerts_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="KeyVerifyBySI20700" elementType="Argument">
              <stringProp name="Argument.name">KeyVerifyBySI20700</stringProp>
              <stringProp name="Argument.value">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc -OM27700_Login" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;https://portal.hqsoft.vn:7443/PhaNamPerform/&apos;);
WDS.browser.get(&apos;${ServerURLs}/&apos;);	
// Input UserName
	var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtUserName-inputEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	txtUserName.click();
	txtUserName.sendKeys(&quot;${UserName}&quot;);
// Input P@ssw0rd
	var txtPassword= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtPassword-inputEl&quot;));
	txtPassword.click();
	txtPassword.sendKeys(&quot;${PassWord}&quot;);
// Click Login
	var btnlogin= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;btnLogin-btnIconEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	btnlogin.click();

WDS.sampleResult.sampleEnd()
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@_OM27700_ScreenLoad" enabled="true">
          <stringProp name="TestPlan.comments">gridcell</stringProp>
          <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 20)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;


function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	
var maxtime=0
// KeyVerify
// Set timeout = 20s
WDS.browser.manage().timeouts().pageLoadTimeout(20, timeunit.SECONDS);
var flag =0 ;
var Status=0 ;// default is notyet
vars.put(flag,0)

WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;${ServerURLs}/${OM27700}&apos;);	
wait.until(conditions.presenceOfElementLocated(pkg.By.id(&apos;Event.Form.menuClickbtnRefresh-btnIconEl&apos;)));// wait key appear
		
//var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@role, &apos;gridcell&apos;)]&quot;)));		
var chkmask=null	
try {
	do {
		WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   chua load xong :&apos; + chkmask);	
		var chkmask= WDS.browser.findElement(pkg.By.xpath(&quot;//*[contains(@class,&apos;x-mask&apos;)]&quot;));
		//wait.until(conditions.invisibilityOfElementLocated(pkg.By.linkText(&apos;... vui&apos;)));
		//wait.until(ExpectedConditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@id,&apos;cboApplyType-triggerWrap&apos;)]/tbody/tr/td[3]/div&quot;)));	
		wait.until(conditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@id,&apos;txtDescr-inputEl&apos;)]&quot;)));	
		}while (chkmask!=null)
}catch(exc)
	{	
		vars.put(chkmask,0)//unmask
		WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    unmask :&apos; + chkmask);
		}


WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    check mask :&apos; + chkmask);

if(${ClickKey}==1)
	{
	//var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@role, &apos;gridcell&apos;)]&quot;)));
	var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@id,&apos;txtDescr-inputEl&apos;)]&quot;)));
	cboKey.click();
	WDS.sampleResult.sampleEnd()	
	}
else
	{
		WDS.sampleResult.sampleEnd()	
	}

WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Done load, elementToBeClickable :&apos; + cboKey);


//WDS.sampleResult.sampleEnd()

//screenshot.renameTo(new java.io.File(&apos;${SA00001}_${DateExc}_Screenload.png&apos;))
var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
FileControl.copyFile(screenshot, new File(&quot;ImgResult/${ProjectCode}/${DateExc}/${OM27700}/&quot; + &apos;${OM27700}_${DateExc}_Screenload.png&apos;));



</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">3000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="OM43100" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">2000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc -Config Driver" enabled="true">
          <stringProp name="TestPlan.comments">Config Chrome</stringProp>
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host">localhost</stringProp>
          <intProp name="WebDriverConfig.http_port">8888</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">false</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">true</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">true</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">StvDriver\chromedriver.exe</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.insecurecerts_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="KeyVerifyBySI20700" elementType="Argument">
              <stringProp name="Argument.name">KeyVerifyBySI20700</stringProp>
              <stringProp name="Argument.value">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc -OM43100_Login" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;https://portal.hqsoft.vn:7443/PhaNamPerform/&apos;);
WDS.browser.get(&apos;${ServerURLs}/&apos;);	
// Input UserName
	var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtUserName-inputEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	txtUserName.click();
	txtUserName.sendKeys(&quot;${UserName}&quot;);
// Input P@ssw0rd
	var txtPassword= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtPassword-inputEl&quot;));
	txtPassword.click();
	txtPassword.sendKeys(&quot;${PassWord}&quot;);
// Click Login
	var btnlogin= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;btnLogin-btnIconEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	btnlogin.click();

WDS.sampleResult.sampleEnd()
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@_OM43100_ScreenLoad" enabled="true">
          <stringProp name="TestPlan.comments">gridcell</stringProp>
          <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 20)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;


function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	
var maxtime=0
// KeyVerify
// Set timeout = 20s
WDS.browser.manage().timeouts().pageLoadTimeout(20, timeunit.SECONDS);
var flag =0 ;
var Status=0 ;// default is notyet
vars.put(flag,0)

WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;${ServerURLs}/${OM43100}&apos;);	
wait.until(conditions.presenceOfElementLocated(pkg.By.id(&apos;Event.Form.menuClickbtnRefresh-btnIconEl&apos;)));// wait key appear
		
//var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@role, &apos;gridcell&apos;)]&quot;)));		
var chkmask=null	
try {
	do {
		WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   chua load xong :&apos; + chkmask);	
		var chkmask= WDS.browser.findElement(pkg.By.xpath(&quot;//*[contains(@class,&apos;x-mask&apos;)]&quot;));
		//wait.until(conditions.invisibilityOfElementLocated(pkg.By.linkText(&apos;... vui&apos;)));
		wait.until(ExpectedConditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@id,&apos;cboTerritory-triggerWrap&apos;)]/tbody/tr/td[3]/div&quot;)));	
		//wait.until(conditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@id,&apos;txtDescr-inputEl&apos;)]&quot;)));	
		}while (chkmask!=null)
}catch(exc)
	{	
		vars.put(chkmask,0)//unmask
		WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    unmask :&apos; + chkmask);
		}


WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    check mask :&apos; + chkmask);

if(${ClickKey}==1)
	{
	//var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@role, &apos;gridcell&apos;)]&quot;)));
	var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@id,&apos;cboTerritory-triggerWrap&apos;)]/tbody/tr/td[3]/div&quot;)));
	cboKey.click();
	WDS.sampleResult.sampleEnd()	
	}
else
	{
		WDS.sampleResult.sampleEnd()	
	}

WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Done load, elementToBeClickable :&apos; + cboKey);


//WDS.sampleResult.sampleEnd()

//screenshot.renameTo(new java.io.File(&apos;${SA00001}_${DateExc}_Screenload.png&apos;))
var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
FileControl.copyFile(screenshot, new File(&quot;ImgResult/${ProjectCode}/${DateExc}/${OM43100}/&quot; + &apos;${OM43100}_${DateExc}_Screenload.png&apos;));



</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">3000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="OM44500" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">2000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc -Config Driver" enabled="true">
          <stringProp name="TestPlan.comments">Config Chrome</stringProp>
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host">localhost</stringProp>
          <intProp name="WebDriverConfig.http_port">8888</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">false</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">true</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">true</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">StvDriver\chromedriver.exe</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.insecurecerts_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="KeyVerifyBySI20700" elementType="Argument">
              <stringProp name="Argument.name">KeyVerifyBySI20700</stringProp>
              <stringProp name="Argument.value">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc -OM44500_Login" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;https://portal.hqsoft.vn:7443/PhaNamPerform/&apos;);
WDS.browser.get(&apos;${ServerURLs}/&apos;);	
// Input UserName
	var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtUserName-inputEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	txtUserName.click();
	txtUserName.sendKeys(&quot;${UserName}&quot;);
// Input P@ssw0rd
	var txtPassword= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtPassword-inputEl&quot;));
	txtPassword.click();
	txtPassword.sendKeys(&quot;${PassWord}&quot;);
// Click Login
	var btnlogin= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;btnLogin-btnIconEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	btnlogin.click();

WDS.sampleResult.sampleEnd()
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@_OM44500_ScreenLoad" enabled="true">
          <stringProp name="TestPlan.comments">gridcell</stringProp>
          <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 20)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;


function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	
var maxtime=0
// KeyVerify
// Set timeout = 20s
WDS.browser.manage().timeouts().pageLoadTimeout(20, timeunit.SECONDS);
var flag =0 ;
var Status=0 ;// default is notyet
vars.put(flag,0)

WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;${ServerURLs}/${OM44500}&apos;);	
wait.until(conditions.presenceOfElementLocated(pkg.By.id(&apos;menuClickbtnRefresh-btnEl&apos;)));// wait key appear
		
//var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@role, &apos;gridcell&apos;)]&quot;)));		
var chkmask=null	
try {
	do {
		WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   chua load xong :&apos; + chkmask);	
		var chkmask= WDS.browser.findElement(pkg.By.xpath(&quot;//*[contains(@class,&apos;x-mask&apos;)]&quot;));
		//wait.until(conditions.invisibilityOfElementLocated(pkg.By.linkText(&apos;... vui&apos;)));
		wait.until(ExpectedConditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@id,&apos;dteFromDate-triggerWrap&apos;)]/tbody/tr/td[2]/div&quot;)));	
		//wait.until(conditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@id,&apos;txtDescr-inputEl&apos;)]&quot;)));	
		}while (chkmask!=null)
}catch(exc)
	{	
		vars.put(chkmask,0)//unmask
		WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    unmask :&apos; + chkmask);
		}


WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    check mask :&apos; + chkmask);

if(${ClickKey}==1)
	{
	//var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@role, &apos;gridcell&apos;)]&quot;)));
	var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@id,&apos;dteFromDate-triggerWrap&apos;)]/tbody/tr/td[2]/div&quot;)));
	cboKey.click();
	WDS.sampleResult.sampleEnd()	
	}
else
	{
		WDS.sampleResult.sampleEnd()	
	}

WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Done load, elementToBeClickable :&apos; + cboKey);


//WDS.sampleResult.sampleEnd()

//screenshot.renameTo(new java.io.File(&apos;${SA00001}_${DateExc}_Screenload.png&apos;))
var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
FileControl.copyFile(screenshot, new File(&quot;ImgResult/${ProjectCode}/${DateExc}/${OM44500}/&quot; + &apos;${OM44500}_${DateExc}_Screenload.png&apos;));



</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">3000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="OM20510" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">2000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc -Config Driver" enabled="true">
          <stringProp name="TestPlan.comments">Config Chrome</stringProp>
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host">localhost</stringProp>
          <intProp name="WebDriverConfig.http_port">8888</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">false</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">true</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">true</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">StvDriver\chromedriver.exe</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.insecurecerts_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="KeyVerifyBySI20700" elementType="Argument">
              <stringProp name="Argument.name">KeyVerifyBySI20700</stringProp>
              <stringProp name="Argument.value">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc -OM20510_Login" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;https://portal.hqsoft.vn:7443/PhaNamPerform/&apos;);
WDS.browser.get(&apos;${ServerURLs}/&apos;);	
// Input UserName
	var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtUserName-inputEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	txtUserName.click();
	txtUserName.sendKeys(&quot;${UserName}&quot;);
// Input P@ssw0rd
	var txtPassword= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtPassword-inputEl&quot;));
	txtPassword.click();
	txtPassword.sendKeys(&quot;${PassWord}&quot;);
// Click Login
	var btnlogin= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;btnLogin-btnIconEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	btnlogin.click();

WDS.sampleResult.sampleEnd()
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@_OM20510_ScreenLoad" enabled="true">
          <stringProp name="TestPlan.comments">gridcell</stringProp>
          <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 20)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;


function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	
var maxtime=0
// KeyVerify
// Set timeout = 20s
WDS.browser.manage().timeouts().pageLoadTimeout(20, timeunit.SECONDS);
var flag =0 ;
var Status=0 ;// default is notyet
vars.put(flag,0)

WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;${ServerURLs}/${OM20510}&apos;);	
wait.until(conditions.presenceOfElementLocated(pkg.By.id(&apos;menuClickbtnRefresh&apos;)));// wait key appear		
//var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@role, &apos;gridcell&apos;)]&quot;)));		
var chkmask=null	
try {
	do {
		WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   chua load xong :&apos; + chkmask);	
		var chkmask= WDS.browser.findElement(pkg.By.xpath(&quot;//*[contains(@class,&apos;x-mask&apos;)]&quot;));
		wait.until(conditions.invisibilityOfElementLocated(pkg.By.linkText(&apos;... vui&apos;)));
		//wait.until(conditions.invisibilityOfElementLocated(pkg.By.linkText(&apos;... vui&apos;)));
		//wait.until(ExpectedConditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@id,&apos;dteFromDate-triggerWrap&apos;)]/tbody/tr/td[2]/div&quot;)));	
		//wait.until(conditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@id,&apos;txtDescr-inputEl&apos;)]&quot;)));	
		}while (chkmask!=null)
}catch(exc)
	{	
		vars.put(chkmask,0)//unmask
		WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    unmask :&apos; + chkmask);
		}

WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    check mask :&apos; + chkmask);

if(${ClickKey}==1)
	{
	//var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@role, &apos;gridcell&apos;)]&quot;)));
	var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@id,&apos;dteFromDate-triggerWrap&apos;)]/tbody/tr/td[2]/div&quot;)));
	cboKey.click();
	WDS.sampleResult.sampleEnd()	
	}
else
	{
		WDS.sampleResult.sampleEnd()	
	}

WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Done load, elementToBeClickable :&apos; + cboKey);


//WDS.sampleResult.sampleEnd()

//screenshot.renameTo(new java.io.File(&apos;${SA00001}_${DateExc}_Screenload.png&apos;))
var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
FileControl.copyFile(screenshot, new File(&quot;ImgResult/${ProjectCode}/${DateExc}/${OM20510}/&quot; + &apos;${OM20510}_${DateExc}_Screenload.png&apos;));



</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">3000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="OM30400" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">2000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc -Config Driver" enabled="true">
          <stringProp name="TestPlan.comments">Config Chrome</stringProp>
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host">localhost</stringProp>
          <intProp name="WebDriverConfig.http_port">8888</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">false</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">true</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">true</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">StvDriver\chromedriver.exe</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.insecurecerts_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="KeyVerifyBySI20700" elementType="Argument">
              <stringProp name="Argument.name">KeyVerifyBySI20700</stringProp>
              <stringProp name="Argument.value">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc -OM30400_Login" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;https://portal.hqsoft.vn:7443/PhaNamPerform/&apos;);
WDS.browser.get(&apos;${ServerURLs}/&apos;);	
// Input UserName
	var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtUserName-inputEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	txtUserName.click();
	txtUserName.sendKeys(&quot;${UserName}&quot;);
// Input P@ssw0rd
	var txtPassword= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtPassword-inputEl&quot;));
	txtPassword.click();
	txtPassword.sendKeys(&quot;${PassWord}&quot;);
// Click Login
	var btnlogin= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;btnLogin-btnIconEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	btnlogin.click();

WDS.sampleResult.sampleEnd()
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@_OM30400_ScreenLoad" enabled="true">
          <stringProp name="TestPlan.comments">gridcell</stringProp>
          <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 20)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;


function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	
var maxtime=0
// KeyVerify
// Set timeout = 20s
WDS.browser.manage().timeouts().pageLoadTimeout(20, timeunit.SECONDS);
var flag =0 ;
var Status=0 ;// default is notyet
vars.put(flag,0)

WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;${ServerURLs}/${OM30400}&apos;);	
//wait.until(conditions.presenceOfElementLocated(pkg.By.id(&apos;menuClickbtnRefresh&apos;)));// wait key appear
wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[contains(@id,&apos;dateVisit&apos;)]&quot;)));	
//var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@role, &apos;gridcell&apos;)]&quot;)));		
var chkmask=null	
try {
	do {
		WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   chua load xong :&apos; + chkmask);	
		var chkmask= WDS.browser.findElement(pkg.By.xpath(&quot;//*[contains(@class,&apos;x-mask&apos;)]&quot;));
		wait.until(conditions.invisibilityOfElementLocated(pkg.By.linkText(&apos;... vui&apos;)));
		//wait.until(conditions.invisibilityOfElementLocated(pkg.By.linkText(&apos;... vui&apos;)));
		//wait.until(ExpectedConditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@id,&apos;dteFromDate-triggerWrap&apos;)]/tbody/tr/td[2]/div&quot;)));	
		//wait.until(conditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@id,&apos;txtDescr-inputEl&apos;)]&quot;)));	
		}while (chkmask!=null)
}catch(exc)
	{	
		vars.put(chkmask,0)//unmask
		WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    unmask :&apos; + chkmask);
		}

WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    check mask :&apos; + chkmask);

if(${ClickKey}==1)
	{
	//var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@role, &apos;gridcell&apos;)]&quot;)));
	var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@id,&apos;dateVisit-triggerWrap&apos;)]/tbody/tr/td[3]/div&quot;)));
	cboKey.click();
	WDS.sampleResult.sampleEnd()	
	}
else
	{
		WDS.sampleResult.sampleEnd()	
	}

WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Done load, elementToBeClickable :&apos; + cboKey);


//WDS.sampleResult.sampleEnd()

//screenshot.renameTo(new java.io.File(&apos;${SA00001}_${DateExc}_Screenload.png&apos;))
var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
FileControl.copyFile(screenshot, new File(&quot;ImgResult/${ProjectCode}/${DateExc}/${OM30400}/&quot; + &apos;${OM30400}_${DateExc}_Screenload.png&apos;));



</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">3000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="OM23800" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">2000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc -Config Driver" enabled="true">
          <stringProp name="TestPlan.comments">Config Chrome</stringProp>
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host">localhost</stringProp>
          <intProp name="WebDriverConfig.http_port">8888</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">false</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">true</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">true</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">StvDriver\chromedriver.exe</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.insecurecerts_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="KeyVerifyBySI20700" elementType="Argument">
              <stringProp name="Argument.name">KeyVerifyBySI20700</stringProp>
              <stringProp name="Argument.value">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">//*[contains(@role, &apos;gridcell&apos;)]</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc -OM23800_Login" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;https://portal.hqsoft.vn:7443/PhaNamPerform/&apos;);
WDS.browser.get(&apos;${ServerURLs}/&apos;);	
// Input UserName
	var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtUserName-inputEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	txtUserName.click();
	txtUserName.sendKeys(&quot;${UserName}&quot;);
// Input P@ssw0rd
	var txtPassword= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtPassword-inputEl&quot;));
	txtPassword.click();
	txtPassword.sendKeys(&quot;${PassWord}&quot;);
// Click Login
	var btnlogin= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;btnLogin-btnIconEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	btnlogin.click();

WDS.sampleResult.sampleEnd()
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@_OM23800_ScreenLoad" enabled="true">
          <stringProp name="TestPlan.comments">gridcell</stringProp>
          <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 20)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;


function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	
var maxtime=0
// KeyVerify
// Set timeout = 20s
WDS.browser.manage().timeouts().pageLoadTimeout(20, timeunit.SECONDS);
var flag =0 ;
var Status=0 ;// default is notyet
vars.put(flag,0)

WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;${ServerURLs}/${OM23800}&apos;);	
//wait.until(conditions.presenceOfElementLocated(pkg.By.id(&apos;menuClickbtnRefresh&apos;)));// wait key appear
wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[contains(@id,&apos;cboAreaMCL-bodyEl&apos;)]&quot;)));	
//var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@role, &apos;gridcell&apos;)]&quot;)));		
var chkmask=null	
try {
	do {
		WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   chua load xong :&apos; + chkmask);	
		var chkmask= WDS.browser.findElement(pkg.By.xpath(&quot;//*[contains(@class,&apos;x-mask&apos;)]&quot;));
		wait.until(conditions.invisibilityOfElementLocated(pkg.By.linkText(&apos;... vui&apos;)));
		//wait.until(conditions.invisibilityOfElementLocated(pkg.By.linkText(&apos;... vui&apos;)));
		//wait.until(ExpectedConditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@id,&apos;dteFromDate-triggerWrap&apos;)]/tbody/tr/td[2]/div&quot;)));	
		//wait.until(conditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@id,&apos;txtDescr-inputEl&apos;)]&quot;)));	
		}while (chkmask!=null)
}catch(exc)
	{	
		vars.put(chkmask,0)//unmask
		WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    unmask :&apos; + chkmask);
		}

WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    check mask :&apos; + chkmask);

if(${ClickKey}==1)
	{
	//var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@role, &apos;gridcell&apos;)]&quot;)));
	var cboKey= WDS.browser.findElement(pkg.By.xpath(&quot;//*[contains(@id,&apos;cboAreaMCL-bodyEl&apos;)]/table/tbody/tr/td[3]/div&quot;));
	cboKey.click();
	WDS.sampleResult.sampleEnd()	
	}
else
	{
		WDS.sampleResult.sampleEnd()	
	}

WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Done load, elementToBeClickable :&apos; + cboKey);


//WDS.sampleResult.sampleEnd()

//screenshot.renameTo(new java.io.File(&apos;${SA00001}_${DateExc}_Screenload.png&apos;))
var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
FileControl.copyFile(screenshot, new File(&quot;ImgResult/${ProjectCode}/${DateExc}/${OM23800}/&quot; + &apos;${OM23800}_${DateExc}_Screenload.png&apos;));



</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">3000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">Result\SA00500_ResultTable.xml</stringProp>
      </ResultCollector>
      <hashTree/>
      <kg.apc.jmeter.perfmon.PerfMonCollector guiclass="kg.apc.jmeter.vizualizers.PerfMonGui" testclass="kg.apc.jmeter.perfmon.PerfMonCollector" testname="jp@gc -ServerAPP_CPU" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">Result\SA00500_Result_ServerApp_CPU.jtl</stringProp>
        <longProp name="interval_grouping">1000</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
        <collectionProp name="metricConnections">
          <collectionProp name="367712295">
            <stringProp name="-2051155110">192.168.120.8</stringProp>
            <stringProp name="1600768">4444</stringProp>
            <stringProp name="66952">CPU</stringProp>
            <stringProp name="0"></stringProp>
          </collectionProp>
        </collectionProp>
      </kg.apc.jmeter.perfmon.PerfMonCollector>
      <hashTree/>
      <kg.apc.jmeter.perfmon.PerfMonCollector guiclass="kg.apc.jmeter.vizualizers.PerfMonGui" testclass="kg.apc.jmeter.perfmon.PerfMonCollector" testname="jp@gc -ServerAPP_RAM" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">Result\SA00500_Result_ServerApp_RAM.jtl</stringProp>
        <longProp name="interval_grouping">1000</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
        <collectionProp name="metricConnections">
          <collectionProp name="-1933002026">
            <stringProp name="-2051155110">192.168.120.8</stringProp>
            <stringProp name="1600768">4444</stringProp>
            <stringProp name="-1993889503">Memory</stringProp>
            <stringProp name="0"></stringProp>
          </collectionProp>
        </collectionProp>
      </kg.apc.jmeter.perfmon.PerfMonCollector>
      <hashTree/>
      <kg.apc.jmeter.perfmon.PerfMonCollector guiclass="kg.apc.jmeter.vizualizers.PerfMonGui" testclass="kg.apc.jmeter.perfmon.PerfMonCollector" testname="jp@gc -ServerAPP_Disk" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">Result\SA00500_Result_ServerApp_disk.jtl</stringProp>
        <longProp name="interval_grouping">1000</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
        <collectionProp name="metricConnections">
          <collectionProp name="-43992775">
            <stringProp name="-2051155110">192.168.120.8</stringProp>
            <stringProp name="1600768">4444</stringProp>
            <stringProp name="2112896831">Disks I/O</stringProp>
            <stringProp name="0"></stringProp>
          </collectionProp>
        </collectionProp>
      </kg.apc.jmeter.perfmon.PerfMonCollector>
      <hashTree/>
      <kg.apc.jmeter.perfmon.PerfMonCollector guiclass="kg.apc.jmeter.vizualizers.PerfMonGui" testclass="kg.apc.jmeter.perfmon.PerfMonCollector" testname="jp@gc -ServerAPP_NetWork" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">Result\SA00500_Result_ServerApp_NetWork.jtl</stringProp>
        <longProp name="interval_grouping">1000</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
        <collectionProp name="metricConnections">
          <collectionProp name="-1820662010">
            <stringProp name="-2051155110">192.168.120.8</stringProp>
            <stringProp name="1600768">4444</stringProp>
            <stringProp name="-274342153">Network I/O</stringProp>
            <stringProp name="0"></stringProp>
          </collectionProp>
        </collectionProp>
      </kg.apc.jmeter.perfmon.PerfMonCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>true</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>true</responseData>
            <samplerData>false</samplerData>
            <xml>true</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>true</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <hostname>true</hostname>
            <threadCounts>true</threadCounts>
            <sampleCount>true</sampleCount>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">Result\SA00500_ResultTree.xml</stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
