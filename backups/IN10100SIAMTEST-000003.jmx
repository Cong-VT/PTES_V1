<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.1.1 r1855137">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="ServerURLs" elementType="Argument">
            <stringProp name="Argument.name">ServerURLs</stringProp>
            <stringProp name="Argument.value">https://portal.hqsoft.vn:7443/Siam2/</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ProjectCode" elementType="Argument">
            <stringProp name="Argument.name">ProjectCode</stringProp>
            <stringProp name="Argument.value">SIAM</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="UserName" elementType="Argument">
            <stringProp name="Argument.name">UserName</stringProp>
            <stringProp name="Argument.value">TinNH</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PassWord" elementType="Argument">
            <stringProp name="Argument.name">PassWord</stringProp>
            <stringProp name="Argument.value">P@ssw0rd</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DateExc" elementType="Argument">
            <stringProp name="Argument.name">DateExc</stringProp>
            <stringProp name="Argument.value">${__groovy(new Date().format(&apos;yyyy-MM-dd&apos;),)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ClickKey" elementType="Argument">
            <stringProp name="Argument.name">ClickKey</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="stvwait" elementType="Argument">
            <stringProp name="Argument.name">stvwait</stringProp>
            <stringProp name="Argument.value">300</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ScreenCode" elementType="Argument">
            <stringProp name="Argument.name">ScreenCode</stringProp>
            <stringProp name="Argument.value">IN10100</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TimeDOM" elementType="Argument">
            <stringProp name="Argument.name">TimeDOM</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="screenshot" elementType="Argument">
            <stringProp name="Argument.name">screenshot</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc - Chrome Driver Config" enabled="true">
          <stringProp name="WebDriverConfig.proxy_type">AUTO_DETECT</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host"></stringProp>
          <intProp name="WebDriverConfig.http_port">8080</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">true</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">true</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">C:\Users\NGUYEN CAO SON\Desktop\PTeS_R1_20191005\PTeS_R1\Runner\bin\StvDriver\chromedriver.exe</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.insecurecerts_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="BranchID_DataLoad" elementType="Argument">
              <stringProp name="Argument.name">BranchID_DataLoad</stringProp>
              <stringProp name="Argument.value">100043</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="BatNbr_DataLoad2" elementType="Argument">
              <stringProp name="Argument.name">BatNbr_DataLoad2</stringProp>
              <stringProp name="Argument.value">IN000021</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="SiteID_DataLoad" elementType="Argument">
              <stringProp name="Argument.name">SiteID_DataLoad</stringProp>
              <stringProp name="Argument.value">100043</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - Login" enabled="true">
          <stringProp name="WebDriverSampler.script">
 	

WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;https://portal.hqsoft.vn:7443/Siam2/&apos;);
// Input UserName
	var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtUserName-inputEl&quot;));	
	txtUserName.click();
	txtUserName.sendKeys(&quot;TinNH&quot;);
// Input P@ssw0rd
	var txtPassword= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtPassword-inputEl&quot;));
	txtPassword.click();
	txtPassword.sendKeys(&quot;P@ssw0rd&quot;);



// Click Login
	var btnlogin= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;btnLogin-btnIconEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	btnlogin.click();
	WDS.sampleResult.sampleEnd()
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - Screenload" enabled="true">
          <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 20)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;


function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	



WDS.sampleResult.sampleStart();
var starttime = new Date().getTime();// starttime
wait.until(conditions.presenceOfElementLocated(pkg.By.id(&apos;btnNotify-btnIconEl&apos;)));
WDS.browser.get(&apos;${ServerURLs}/${ScreenCode}&apos;);	

// wait key appear
//var cboKey= WDS.browser.findElement((pkg.By.id(&apos;menuClickbtnNext-btnIconEl&apos;)));
var endtimeDOM = new Date().getTime();// starttime
var DOMTimeScr = endtimeDOM-starttime;	
var flag =0 ;
var chkmask=null	
try {
	do {
		stvwait(200);
		//WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   chua load xong :&apos; + chkmask);	
		var chkmask= WDS.browser.findElement(pkg.By.xpath(&quot;//*[contains(@class,&apos;x-mask&apos;)]&quot;));		
	}while (chkmask!=null)
}catch(exc)
	{	
		vars.put(chkmask,0)//unmask
		//WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    unmask :&apos; + chkmask);
		}


var cbokey_Arrow= WDS.browser.findElement(pkg.By.xpath(&quot;//*[contains(@id, &apos;cboPopupCpny-triggerWrap&apos;)]/tbody/tr/td[2]&quot;));
do{	
	cbokey_Arrow.click();	
	wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[contains(text(),&apos;${BranchID_DataLoad}&apos;)]&quot;)));
	var check =WDS.browser.findElement(pkg.By.xpath(&quot;//*[contains(text(),&apos;${BranchID_DataLoad}&apos;)]&quot;));
	//WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Da co du lieu check &apos; + check);	
	if (check==null)
			{
				stvwait(300);
			}
	}while  (check==null)



// Exec to verify 	
if(${ClickKey}==1)
	{
	var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@id, &apos;BranchID&apos;)]&quot;)));
	//cboKey.click();	
	cbokey_Arrow.click();
	WDS.sampleResult.sampleEnd();	
	}
else
	{		
		WDS.sampleResult.sampleEnd();		
	}

if (${TimeDOM} ==1)
	{
	WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   Time to Screen Load - DOM Done  :&apos; + DOMTimeScr +&apos; (ms)&apos;);
	}

if(${screenshot}==1)
	{
var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
FileControl.copyFile(screenshot, new File(&quot;ImgResult/${ProjectCode}/${DateExc}/${ScreenCode}/&quot; + &apos;${ScreenCode}_${DateExc}_Screenload.png&apos;));
	}


    </stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - Data Load" enabled="true">
          <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 10)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;
function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	

var BranchID= WDS.browser.findElement(pkg.By.xpath(&quot;//*[contains(text(),&apos;${BranchID_DataLoad}&apos;)]&quot;));	
	WDS.sampleResult.sampleStart();
	BranchID.click();
//wait.until(conditions.invisibilityOfElementLocated(pkg.By.xpath(&quot;//*[contains(text(),&apos;CÔNG TY TNHH THƯƠNG MẠI NGHĨA THÁI&apos;)]&quot;)));

var btnPopupOk= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;btnPopupOk-btnIconEl&quot;));
	//var btnPopupOk= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;BranchID&quot;));
	btnPopupOk.click();
//WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   BatNbr  :&apos; + BatNbr);
WDS.sampleResult.sampleEnd();
var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
FileControl.copyFile(screenshot, new File(&quot;ImgResult/${ProjectCode}/${DateExc}/${ScreenCode}/&quot; + &apos;${ScreenCode}_${DateExc}_DataLoad_ClosedData.png&apos;));
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - Data Load 2" enabled="true">
          <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 10)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;
function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	

wait.until(conditions.invisibilityOfElementLocated(pkg.By.xpath(&quot;//*[contains(@class,&apos;x-mask&apos;)]&quot;)));
	WDS.sampleResult.sampleStart();
var BatNbr_Arrow= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@id, &apos;BatNbr-triggerWrap&apos;)]/tbody/tr/td[3]&quot;)));
	BatNbr_Arrow.click();
wait.until(conditions.invisibilityOfElementLocated(pkg.By.xpath(&quot;//*[contains(@class,&apos;x-mask&apos;)]&quot;)));
var BatNbr= WDS.browser.findElement(pkg.By.xpath(&quot;//*[contains(text(),&apos;${BatNbr_DataLoad2}&apos;)]&quot;));	
	WDS.sampleResult.sampleStart();
	BatNbr.click();
wait.until(conditions.invisibilityOfElementLocated(pkg.By.xpath(&quot;//*[contains(text(),&apos;202,402.79&apos;)]&quot;)));
//WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   BatNbr  :&apos; + BatNbr);
WDS.sampleResult.sampleEnd();
var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
FileControl.copyFile(screenshot, new File(&quot;ImgResult/${ProjectCode}/${DateExc}/${ScreenCode}/&quot; + &apos;${ScreenCode}_${DateExc}_DataLoad_ClosedData.png&apos;));
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - DataLoad_ClosedData" enabled="false">
          <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 10)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;
function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	
wait.until(conditions.invisibilityOfElementLocated(pkg.By.xpath(&quot;//*[contains(@class,&apos;x-mask&apos;)]&quot;)));
	WDS.sampleResult.sampleStart();
var BatNbr_Arrow= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@id, &apos;BatNbr-triggerWrap&apos;)]/tbody/tr/td[2]&quot;)));
	BatNbr_Arrow.click();
wait.until(conditions.invisibilityOfElementLocated(pkg.By.xpath(&quot;//*[contains(text(),&apos;202,402.79&apos;)]&quot;)));	
 	//wait done reload after closed data
 
WDS.sampleResult.sampleEnd();
var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
FileControl.copyFile(screenshot, new File(&quot;ImgResult/${ProjectCode}/${DateExc}/${ScreenCode}/&quot; + &apos;${ScreenCode}_${DateExc}_DataLoad_ClosedData.png&apos;));
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="false">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">4</stringProp>
        </LoopController>
        <hashTree>
          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - Data Load 2" enabled="true">
            <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 10)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;
function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	

wait.until(conditions.invisibilityOfElementLocated(pkg.By.xpath(&quot;//*[contains(@class,&apos;x-mask&apos;)]&quot;)));
WDS.sampleResult.sampleStart();
var BatNbr_Arrow= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@id, &apos;BatNbr-triggerWrap&apos;)]/tbody/tr/td[3]&quot;)));
	BatNbr_Arrow.click();
wait.until(conditions.invisibilityOfElementLocated(pkg.By.xpath(&quot;//*[contains(@class,&apos;x-mask&apos;)]&quot;)));
var BatNbr= WDS.browser.findElement(pkg.By.xpath(&quot;//*[contains(text(),&apos;${BatNbr_DataLoad2}&apos;)]&quot;));	
	WDS.sampleResult.sampleStart();
	BatNbr.click();

//WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   BatNbr  :&apos; + BatNbr);
WDS.sampleResult.sampleEnd();
var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
FileControl.copyFile(screenshot, new File(&quot;ImgResult/${ProjectCode}/${DateExc}/${ScreenCode}/&quot; + &apos;${ScreenCode}_${DateExc}_DataLoad_ClosedData.png&apos;));
</stringProp>
            <stringProp name="WebDriverSampler.parameters"></stringProp>
            <stringProp name="WebDriverSampler.language">javascript</stringProp>
          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
          <hashTree/>
        </hashTree>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - DataLoad_ClosedData" enabled="false">
          <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 10)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;
function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	

wait.until(conditions.invisibilityOfElementLocated(pkg.By.xpath(&quot;//*[contains(@class,&apos;x-mask&apos;)]&quot;)));
WDS.sampleResult.sampleStart();
var BatNbr_Arrow= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@id, &apos;BatNbr-triggerWrap&apos;)]/tbody/tr/td[2]&quot;)));
	BatNbr_Arrow.click();
 	//wait done reload after closed data
wait.until(conditions.invisibilityOfElementLocated(pkg.By.xpath(&quot;//*[contains(text(),&apos;202,402.79&apos;)]&quot;)));	
WDS.sampleResult.sampleEnd();
var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
FileControl.copyFile(screenshot, new File(&quot;ImgResult/${ProjectCode}/${DateExc}/${ScreenCode}/&quot; + &apos;${ScreenCode}_${DateExc}_DataLoad_ClosedData.png&apos;));
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
