<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.1.1 r1855137">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="SIAMTEST" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="ServerURLs" elementType="Argument">
            <stringProp name="Argument.name">ServerURLs</stringProp>
            <stringProp name="Argument.value">https://portal.hqsoft.vn:7443/Siam2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ProjectCode" elementType="Argument">
            <stringProp name="Argument.name">ProjectCode</stringProp>
            <stringProp name="Argument.value">SIAMTEST</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="UserName" elementType="Argument">
            <stringProp name="Argument.name">UserName</stringProp>
            <stringProp name="Argument.value">Admin</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PassWord" elementType="Argument">
            <stringProp name="Argument.name">PassWord</stringProp>
            <stringProp name="Argument.value">P@ssw0rd</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DateExc" elementType="Argument">
            <stringProp name="Argument.name">DateExc</stringProp>
            <stringProp name="Argument.value">${__groovy(new Date().format(&apos;yyyy-MM-dd&apos;),)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ClickKey" elementType="Argument">
            <stringProp name="Argument.name">ClickKey</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="stvwait" elementType="Argument">
            <stringProp name="Argument.name">stvwait</stringProp>
            <stringProp name="Argument.value">300</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TimeDOM" elementType="Argument">
            <stringProp name="Argument.name">TimeDOM</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="screenshot" elementType="Argument">
            <stringProp name="Argument.name">screenshot</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Release_OM10101" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc -Config Driver" enabled="true">
          <stringProp name="TestPlan.comments">Config Chrome</stringProp>
          <stringProp name="WebDriverConfig.proxy_type">DIRECT</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host">localhost</stringProp>
          <intProp name="WebDriverConfig.http_port">8888</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">false</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">false</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">true</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">true</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">StvDriver\chromedriver.exe</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.insecurecerts_enabled">true</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="OrdNbr" elementType="Argument">
              <stringProp name="Argument.name">OrdNbr</stringProp>
              <stringProp name="Argument.value">DO191100001</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="BranchID" elementType="Argument">
              <stringProp name="Argument.name">BranchID</stringProp>
              <stringProp name="Argument.value">100043</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="UserDist" elementType="Argument">
              <stringProp name="Argument.name">UserDist</stringProp>
              <stringProp name="Argument.value">100043</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ScreenCode_CrtOrd" elementType="Argument">
              <stringProp name="Argument.name">ScreenCode_CrtOrd</stringProp>
              <stringProp name="Argument.value">OM10101</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="QtySKU" elementType="Argument">
              <stringProp name="Argument.name">QtySKU</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.desc">SL san pham tren don hang</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="InvtID1" elementType="Argument">
              <stringProp name="Argument.name">InvtID1</stringProp>
              <stringProp name="Argument.value">TDT0377</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="InvtID2" elementType="Argument">
              <stringProp name="Argument.name">InvtID2</stringProp>
              <stringProp name="Argument.value">TDT0397</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="InvtID1_QtyLot" elementType="Argument">
              <stringProp name="Argument.name">InvtID1_QtyLot</stringProp>
              <stringProp name="Argument.value">2000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="InvtID2_QtyLot" elementType="Argument">
              <stringProp name="Argument.name">InvtID2_QtyLot</stringProp>
              <stringProp name="Argument.value">2000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="InvtID1_PriceLot" elementType="Argument">
              <stringProp name="Argument.name">InvtID1_PriceLot</stringProp>
              <stringProp name="Argument.value">9999</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="InvtID2_PriceLot" elementType="Argument">
              <stringProp name="Argument.name">InvtID2_PriceLot</stringProp>
              <stringProp name="Argument.value">7777</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="InvtID2_Name" elementType="Argument">
              <stringProp name="Argument.name">InvtID2_Name</stringProp>
              <stringProp name="Argument.value">PE rope 2mm 90M L3 (Red-Green-Blue-Yellow-Orange) Cock Brand</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="InvtID1_Name" elementType="Argument">
              <stringProp name="Argument.name">InvtID1_Name</stringProp>
              <stringProp name="Argument.value">PE rope 2mm Blue 90M L3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc -OM10100_Login" enabled="false">
          <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 10)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;


function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	

WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;${ServerURLs}/&apos;);
// Input UserName
	var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtUserName-inputEl&quot;));	
	txtUserName.click();
	txtUserName.sendKeys(&quot;${UserDist}&quot;);
// Input P@ssw0rd
	var txtPassword= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtPassword-inputEl&quot;));
	txtPassword.click();
	txtPassword.sendKeys(&quot;P@ssw0rd&quot;);

	var txtCaptcha= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;txtCaptcha-inputEl&quot;));
	txtPassword.click();
	//txtPassword.sendKeys(&quot;P@ssw0rd&quot;);
	stvwait(2000);
	
// Click Login
	var btnlogin= WDS.browser.findElement(org.openqa.selenium.By.id(&quot;btnLogin-btnIconEl&quot;));
	//var txtUserName= WDS.browser.findElement(org.openqa.selenium.By.Id(&quot;txtUserName&quot;));
	btnlogin.click();
	wait.until(conditions.invisibilityOfElementLocated(pkg.By.linkText(&apos;... vui&apos;)));
	wait.until(conditions.presenceOfElementLocated(pkg.By.id(&apos;btnProfile-btnWrap&apos;)));// wait key appear	
WDS.sampleResult.sampleEnd()
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc-OM10101_ScreenLoad" enabled="true">
          <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 10)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;


function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	



WDS.sampleResult.sampleStart();
var starttime = new Date().getTime();// starttime
WDS.browser.get(&apos;${ServerURLs}/${ScreenCode_CrtOrd}&apos;);	

wait.until(conditions.presenceOfElementLocated(pkg.By.id(&apos;menuClickbtnRefresh-btnWrap&apos;)));// wait key appear
//var cboKey= WDS.browser.findElement((pkg.By.id(&apos;menuClickbtnNext-btnIconEl&apos;)));
var endtimeDOM = new Date().getTime();// starttime
var DOMTimeScr = endtimeDOM-starttime
if (${TimeDOM} ==1)
	{
	WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   Time to Screen Load - DOM Done  :&apos; + DOMTimeScr +&apos; (ms)&apos;);
	}
	
var flag =0 ;
var chkmask=null	
try {
	do {
		stvwait(${stvwait});
		//WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   chua load xong :&apos; + chkmask);	
		var chkmask= WDS.browser.findElement(pkg.By.xpath(&quot;//*[contains(@class,&apos;x-mask&apos;)]&quot;));		
	}while (chkmask!=null)
}catch(exc)
	{	
		vars.put(chkmask,0)//unmask
		//WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    unmask :&apos; + chkmask);
		}

// Exec to verify 	
if(${ClickKey}==1)
	{
	var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@id, &apos;txtRemark-inputEl&apos;)]&quot;)));
	cboKey.click();	
	WDS.sampleResult.sampleEnd();	
	}
else
	{		
		WDS.sampleResult.sampleEnd();		
	}

//WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    Done load, elementToBeClickable :&apos; + cboKey);

if(${screenshot}==1)
	{
var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
FileControl.copyFile(screenshot, new File(&quot;ImgResult/${ProjectCode}/${DateExc}/${ScreenCode}/&quot; + &apos;${ScreenCode}_${DateExc}_Screenload.png&apos;));
	}


    </stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
          </ConstantTimer>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="false">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">def response = prev.getResponseDataAsString();
def path =&quot;D:\\1.Working\\100.JM\\Build\\PTeS_R1\\Runner\\bin\\Result\\PhaNam\\OM21100&quot;;
def pathdata =&quot;D:\\1.Working\\100.JM\\Build\\PTeS_R1\\Runner\\bin\\Result\\PhaNam\\OM21100\\DataInfor&quot;;
def filedata=&quot;OM21100_pcInventoryActiveByBranchFree.txt&quot;;
def datacount=&quot;OM21100_countdata.txt&quot;;

def json = new groovy.json.JsonSlurper().parseText(response)
def data_size=json.data.size().toString();
new File(path,filedata)&lt;&lt;response
new File(pathdata,datacount)&lt;&lt; &quot;\n 488 /PhaNamPerform/HQ/GetData?_dc=1570698800058&amp;action=read : [ &quot; + data_size +&quot;]&quot;</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc-OM10101_DataLoad" enabled="false">
          <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 10)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;
function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	

var cboOrdNbr_Arrow= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@id, &apos;cboOrderNbr-triggerWrap&apos;)]/tbody/tr/td[3]&quot;)));
	cboOrdNbr_Arrow.click();
// chose PriceID
wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[contains(text(),&apos;${OrdNbr}&apos;)]&quot;)));// wait

var cboOrdNbr= WDS.browser.findElement(pkg.By.xpath(&quot;//*[contains(text(),&apos;${OrdNbr}&apos;)]&quot;));// SO0000034
	WDS.sampleResult.sampleStart();// Set Start Time
	cboOrdNbr.click();
	
// Verify done load data
wait.until(conditions.invisibilityOfElementLocated(pkg.By.xpath(&quot;//*[contains(text(),&apos;Please wait...&apos;)]&quot;)));

WDS.sampleResult.sampleEnd();
if(${screenshot}==1)
	{
	var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
	FileControl.copyFile(screenshot, new File(&quot;ImgResult/${ProjectCode}/${DateExc}/${ScreenCode}/&quot; + &apos;${ScreenCode}_${DateExc}_DataLoad.png&apos;));
	}</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">2000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc-OM10101_DataLoad_ClosedData" enabled="false">
          <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 10)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;
function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	

wait.until(conditions.invisibilityOfElementLocated(pkg.By.xpath(&quot;//*[contains(@class,&apos;x-mask&apos;)]&quot;)));
WDS.sampleResult.sampleStart();
var cboOrderNbr_Arrow= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@id, &apos;cboOrderNbr-triggerWrap&apos;)]/tbody/tr/td[2]&quot;)));
	cboOrderNbr_Arrow.click();
//wait done reload after closed data
wait.until(conditions.invisibilityOfElementLocated(pkg.By.xpath(&quot;//*[contains(text(),&apos;TDT0406&apos;)]&quot;)));

WDS.sampleResult.sampleEnd();
var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
FileControl.copyFile(screenshot, new File(&quot;ImgResult/${ProjectCode}/${DateExc}/${ScreenCode}/&quot; + &apos;${ScreenCode}_${DateExc}_DataLoad_ClosedData.png&apos;));
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller_CreateNewOrd" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </LoopController>
        <hashTree>
          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc-OM10101_Get_CustID" enabled="true">
            <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 10)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;
function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	

var cboCustID= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@id, &apos;btnFindCust-btnEl&apos;)]&quot;)));
	cboCustID.click();
// chose PriceID
wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[contains(@id,&apos;winCustID_header_hd-textEl&apos;)]&quot;)));// wait
wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[contains(@id,&apos;winCustID-body&apos;)]/div/div/div[2]/div/div[2]/div/table/tbody/tr[1]/td[2]&quot;)));// wait
var CustID= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@id,&apos;winCustID-body&apos;)]/div/div/div[2]/div/div[2]/div/table/tbody/tr[1]/td[2]&quot;)));
	
//var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
WDS.sampleResult.sampleStart();
actions.moveToElement(CustID).doubleClick().perform()	
	//CustID.doubleClick();

// Verify done load data
wait.until(conditions.invisibilityOfElementLocated(pkg.By.xpath(&quot;//*[contains(text(),&apos;Please wait...&apos;)]&quot;)));

WDS.sampleResult.sampleEnd();
/*
var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
FileControl.copyFile(screenshot, new File(&quot;ImgResult/${ProjectCode}/${DateExc}/${ScreenCode}/&quot; + &apos;${ScreenCode}_${DateExc}_DataLoad.png&apos;));
*/</stringProp>
            <stringProp name="WebDriverSampler.parameters"></stringProp>
            <stringProp name="WebDriverSampler.language">javascript</stringProp>
          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">2000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc-OM10101_GetTab_Info" enabled="true">
            <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 10)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;
function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
}

WDS.sampleResult.sampleStart();	 
var Tab_Info= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@id,&apos;tabInfo&apos;)]/div/div/div[2]/div/a&quot;)));
	Tab_Info.click();
wait.until(conditions.invisibilityOfElementLocated(pkg.By.xpath(&quot;//*[contains(text(),&apos;Please wait...&apos;)]&quot;)));
wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[contains(@id,&apos;txtOrderDate-triggerWrap&apos;)]&quot;)));	
//var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
//actions.moveToElement(CustID).doubleClick().perform()	
	//CustID.doubleClick();

WDS.sampleResult.sampleEnd();
</stringProp>
            <stringProp name="WebDriverSampler.parameters"></stringProp>
            <stringProp name="WebDriverSampler.language">javascript</stringProp>
          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">2000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc-OM10101_GetTab_Info_TransForm" enabled="true">
            <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 10)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;
function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
}

WDS.sampleResult.sampleStart();
	 
var ColInvtID= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@id,&apos;colInvtID-titleEl&apos;)]&quot;)));
	ColInvtID.click();
wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[contains(@id,&apos;grdOrdDet-body&apos;)]&quot;)));
var grd_InvtID= WDS.browser.findElement(pkg.By.xpath(&quot;//*[contains(@id,&apos;grdOrdDet-body&apos;)]&quot;));
	grd_InvtID.click();
var grd_Line1= WDS.browser.findElement(pkg.By.xpath(&quot;//*[contains(@id,&apos;grdOrdDet-body&apos;)]/div/table/tbody/tr/td/div&quot;));
	grd_Line1.click();
wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[contains(@id,&apos;grdOrdDet-body&apos;)]/div/table/tbody/tr/td[2]/div&quot;)));

WDS.sampleResult.sampleEnd();
</stringProp>
            <stringProp name="WebDriverSampler.parameters"></stringProp>
            <stringProp name="WebDriverSampler.language">javascript</stringProp>
          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">2000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller_AddInvtID" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">1</stringProp>
          </LoopController>
          <hashTree>
            <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc-OM10101_Get_InvtID_${InvtID1}" enabled="true">
              <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 10)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;
function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	

var LineRef = 1
WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    QtySKU :&apos; + ${QtySKU} + &apos;---LineRef : &apos; + LineRef);



var ipt_InvtID =  WDS.browser.findElement(pkg.By.xpath(&quot;//*[contains(@id,&apos;grdOrdDet-body&apos;)]/div/table/tbody/tr/td[2]/div&quot;));
	ipt_InvtID.click();//Click on InvtID col
var ipttxt_InvtID =  WDS.browser.findElement(pkg.By.xpath(&quot;//*[contains(@id,&apos;cboDetInvtID-inputEl&apos;)]&quot;));	
	ipttxt_InvtID.sendKeys(&quot;${InvtID1}&quot;);

WDS.sampleResult.sampleStart();
wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[contains(text(),&apos;${InvtID1}&apos;)]&quot;)));
var slt_InvtID = WDS.browser.findElement(pkg.By.xpath(&quot;//*[contains(text(),&apos;${InvtID1}&apos;)]&quot;));

	slt_InvtID.click();
var Descr_InvtID =  WDS.browser.findElement(pkg.By.xpath(&quot;//*[contains(@id,&apos;grdOrdDet-body&apos;)]/div/table/tbody/tr/td[3]/div&quot;));
	Descr_InvtID.click();//Click on Descr col	
	
wait.until(conditions.invisibilityOfElementLocated(pkg.By.xpath(&quot;//*[contains(text(),&apos;${InvtID1_Name}&apos;)]&quot;)));
stvwait(500);
wait.until(conditions.invisibilityOfElementLocated(pkg.By.xpath(&quot;//*[contains(text(),&apos;Please wait...&apos;)]&quot;)));

wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[contains(@id,&apos;grdOrdDet&apos;)]/div[2]/div/table/tbody/tr[1]/td[8]/div&quot;)));

WDS.sampleResult.sampleEnd();
if(${screenshot}==1)
	{
	var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
	FileControl.copyFile(screenshot, new File(&quot;ImgResult/${ProjectCode}/${DateExc}/${ScreenCode}/&quot; + &apos;${ScreenCode}_${DateExc}_DataLoad.png&apos;));
	}</stringProp>
              <stringProp name="WebDriverSampler.parameters"></stringProp>
              <stringProp name="WebDriverSampler.language">javascript</stringProp>
            </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
            <hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">2000</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
            <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc-OM10101_Get_InvtID_${InvtID1}_inputQty" enabled="true">
              <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 10)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;
function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	

wait.until(conditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@id,&apos;grdOrdDet&apos;)]/div[2]/div/table/tbody/tr[1]/td[8]/div&quot;)));	
var textQty_InvtID =  WDS.browser.findElement(pkg.By.xpath(&quot;//*[contains(@id,&apos;grdOrdDet&apos;)]/div[2]/div/table/tbody/tr[1]/td[8]/div&quot;));
	textQty_InvtID.click();//Click on Qty LOT

stvwait(300);
wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[contains(@id,&apos;grdOrdDet&apos;)]/div[4]/table/tbody/tr/td[2]/table/tbody/tr/td/input&quot;)));
//wait.until(conditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@id,&apos;grdOrdDet&apos;)]/div[2]/div/table/tbody/tr[1]/td[8]/div&quot;)));	
var Qty_InvtID =  WDS.browser.findElement(pkg.By.xpath(&quot;//*[contains(@id,&apos;grdOrdDet&apos;)]/div[4]/table/tbody/tr/td[2]/table/tbody/tr/td/input&quot;));
//	textQty_InvtID.click();//Click on InvtID col
	Qty_InvtID.sendKeys(&quot;${InvtID1_QtyLot}&quot;);
	
WDS.sampleResult.sampleStart();

WDS.sampleResult.sampleEnd();
if(${screenshot}==1)
	{
	var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
	FileControl.copyFile(screenshot, new File(&quot;ImgResult/${ProjectCode}/${DateExc}/${ScreenCode}/&quot; + &apos;${ScreenCode}_${DateExc}_DataLoad.png&apos;));
	}</stringProp>
              <stringProp name="WebDriverSampler.parameters"></stringProp>
              <stringProp name="WebDriverSampler.language">javascript</stringProp>
            </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
            <hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">500</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
            <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc-OM10101_Get_InvtID_${InvtID1}_inputPrice" enabled="true">
              <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 10)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;
function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	


wait.until(conditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@id,&apos;grdOrdDet&apos;)]/div[2]/div/table/tbody/tr[1]/td[11]/div&quot;)));	
var textPrice_InvtID =  WDS.browser.findElement(pkg.By.xpath(&quot;//*[contains(@id,&apos;grdOrdDet&apos;)]/div[2]/div/table/tbody/tr[1]/td[11]/div&quot;));
	textPrice_InvtID.click();//Click on Price	
stvwait(500);
wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[contains(@id,&apos;grdOrdDet&apos;)]/div[5]/table/tbody/tr/td[2]/table/tbody/tr/td/input&quot;)));
var Price_InvtID =  WDS.browser.findElement(pkg.By.xpath(&quot;//*[contains(@id,&apos;grdOrdDet&apos;)]/div[5]/table/tbody/tr/td[2]/table/tbody/tr/td/input&quot;));
	//textPrice_InvtID.click();//Click on InvtID col
	Price_InvtID.sendKeys(&quot;${InvtID1_PriceLot}&quot;);

var Descr_InvtID =  WDS.browser.findElement(pkg.By.xpath(&quot;//*[contains(@id,&apos;grdOrdDet-body&apos;)]/div/table/tbody/tr/td[3]/div&quot;));
	Descr_InvtID.click();//Click on Descr col	
	
WDS.sampleResult.sampleStart();
WDS.sampleResult.sampleEnd();



if(${screenshot}==1)
	{
	var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
	FileControl.copyFile(screenshot, new File(&quot;ImgResult/${ProjectCode}/${DateExc}/${ScreenCode}/&quot; + &apos;${ScreenCode}_${DateExc}_DataLoad.png&apos;));
	}</stringProp>
              <stringProp name="WebDriverSampler.parameters"></stringProp>
              <stringProp name="WebDriverSampler.language">javascript</stringProp>
            </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
            <hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">500</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
            <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc-OM10101_Get_InvtID_${InvtID2}" enabled="true">
              <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 10)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;
function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	

var ipt_InvtID =  WDS.browser.findElement(pkg.By.xpath(&quot;//*[contains(@id,&apos;grdOrdDet-body&apos;)]/div/table/tbody/tr[2]/td[2]/div&quot;));
	ipt_InvtID.click();//Click on InvtID col
var ipttxt_InvtID =  WDS.browser.findElement(pkg.By.xpath(&quot;//*[contains(@id,&apos;cboDetInvtID-inputEl&apos;)]&quot;));	
	ipttxt_InvtID.sendKeys(&quot;${InvtID2}&quot;);

WDS.sampleResult.sampleStart();
wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[contains(text(),&apos;${InvtID2}&apos;)]&quot;)));
var slt_InvtID = WDS.browser.findElement(pkg.By.xpath(&quot;//*[contains(text(),&apos;${InvtID2}&apos;)]&quot;));

	slt_InvtID.click();
var Descr_InvtID =  WDS.browser.findElement(pkg.By.xpath(&quot;//*[contains(@id,&apos;grdOrdDet-body&apos;)]/div/table/tbody/tr[2]/td[3]/div&quot;));
	Descr_InvtID.click();//Click on Descr col	
	
wait.until(conditions.invisibilityOfElementLocated(pkg.By.xpath(&quot;//*[contains(text(),&apos;${InvtID2_Name}&apos;)]&quot;)));
stvwait(500);
wait.until(conditions.invisibilityOfElementLocated(pkg.By.xpath(&quot;//*[contains(text(),&apos;Please wait...&apos;)]&quot;)));

wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[contains(@id,&apos;grdOrdDet&apos;)]/div[2]/div/table/tbody/tr[1]/td[8]/div&quot;)));

WDS.sampleResult.sampleEnd();
if(${screenshot}==1)
	{
	var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
	FileControl.copyFile(screenshot, new File(&quot;ImgResult/${ProjectCode}/${DateExc}/${ScreenCode}/&quot; + &apos;${ScreenCode}_${DateExc}_DataLoad.png&apos;));
	}</stringProp>
              <stringProp name="WebDriverSampler.parameters"></stringProp>
              <stringProp name="WebDriverSampler.language">javascript</stringProp>
            </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
            <hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">2000</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
            <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc-OM10101_Get_InvtID_${InvtID2}_inputQty" enabled="true">
              <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 10)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;
function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	

wait.until(conditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@id,&apos;grdOrdDet&apos;)]/div[2]/div/table/tbody/tr[2]/td[8]/div&quot;)));	
var textQty_InvtID =  WDS.browser.findElement(pkg.By.xpath(&quot;//*[contains(@id,&apos;grdOrdDet&apos;)]/div[2]/div/table/tbody/tr[2]/td[8]/div&quot;));
	textQty_InvtID.click();//Click on Qty LOT
stvwait(300);
wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[contains(@id,&apos;grdOrdDet&apos;)]/div[4]/table/tbody/tr/td[2]/table/tbody/tr/td/input&quot;)));
//wait.until(conditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@id,&apos;grdOrdDet&apos;)]/div[2]/div/table/tbody/tr[1]/td[8]/div&quot;)));	
var Qty_InvtID =  WDS.browser.findElement(pkg.By.xpath(&quot;//*[contains(@id,&apos;grdOrdDet&apos;)]/div[4]/table/tbody/tr/td[2]/table/tbody/tr/td/input&quot;));
//	textQty_InvtID.click();//Click on InvtID col
	Qty_InvtID.sendKeys(&quot;${InvtID2_QtyLot}&quot;);
	
WDS.sampleResult.sampleStart();

WDS.sampleResult.sampleEnd();
if(${screenshot}==1)
	{
	var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
	FileControl.copyFile(screenshot, new File(&quot;ImgResult/${ProjectCode}/${DateExc}/${ScreenCode}/&quot; + &apos;${ScreenCode}_${DateExc}_DataLoad.png&apos;));
	}</stringProp>
              <stringProp name="WebDriverSampler.parameters"></stringProp>
              <stringProp name="WebDriverSampler.language">javascript</stringProp>
            </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
            <hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">500</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
            <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc-OM10101_Get_InvtID_${InvtID2}_inputPrice" enabled="true">
              <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 10)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;
function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	


wait.until(conditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@id,&apos;grdOrdDet&apos;)]/div[2]/div/table/tbody/tr[2]/td[11]/div&quot;)));	
var textPrice_InvtID =  WDS.browser.findElement(pkg.By.xpath(&quot;//*[contains(@id,&apos;grdOrdDet&apos;)]/div[2]/div/table/tbody/tr[2]/td[11]/div&quot;));
	textPrice_InvtID.click();//Click on Price	

wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[contains(@id,&apos;grdOrdDet&apos;)]/div[5]/table/tbody/tr/td[2]/table/tbody/tr/td/input&quot;)));
var Price_InvtID =  WDS.browser.findElement(pkg.By.xpath(&quot;//*[contains(@id,&apos;grdOrdDet&apos;)]/div[5]/table/tbody/tr/td[2]/table/tbody/tr/td/input&quot;));
	//textPrice_InvtID.click();//Click on InvtID col
	Price_InvtID.sendKeys(&quot;${InvtID2_PriceLot}&quot;);

var Descr_InvtID =  WDS.browser.findElement(pkg.By.xpath(&quot;//*[contains(@id,&apos;grdOrdDet-body&apos;)]/div/table/tbody/tr[2]/td[3]/div&quot;));
	Descr_InvtID.click();//Click on Descr col	
	
WDS.sampleResult.sampleStart();
WDS.sampleResult.sampleEnd();



if(${screenshot}==1)
	{
	var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
	FileControl.copyFile(screenshot, new File(&quot;ImgResult/${ProjectCode}/${DateExc}/${ScreenCode}/&quot; + &apos;${ScreenCode}_${DateExc}_DataLoad.png&apos;));
	}</stringProp>
              <stringProp name="WebDriverSampler.parameters"></stringProp>
              <stringProp name="WebDriverSampler.language">javascript</stringProp>
            </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
            <hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">500</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc-OM10101_SaveOrd" enabled="true">
            <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 10)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;
function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	

var btnSave =  WDS.browser.findElement(pkg.By.xpath(&quot;//*[contains(@id,&apos;menuClickbtnSave-btnWrap&apos;)]&quot;));
WDS.sampleResult.sampleStart();
	btnSave.click();//Click on InvtID col
stvwait(1000);
//wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[contains(text(),&apos;Please wait...&apos;)]&quot;)));
wait.until(conditions.invisibilityOfElementLocated(pkg.By.xpath(&quot;//*[contains(text(),&apos;Please wait...&apos;)]&quot;)));
//var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@id, &apos;txtRemark-inputEl&apos;)]&quot;)));
//	cboKey.click();
WDS.sampleResult.sampleEnd();
//stvwait(1000);
//var msg_btn_Ok= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@id,&apos;button-1005-btnIconEl&apos;)]&quot;)));
//	msg_btn_Ok.click();


if(${screenshot}==1)
	{
	var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
	FileControl.copyFile(screenshot, new File(&quot;ImgResult/${ProjectCode}/${DateExc}/${ScreenCode}/&quot; + &apos;${ScreenCode}_${DateExc}_DataLoad.png&apos;));
	}</stringProp>
            <stringProp name="WebDriverSampler.parameters"></stringProp>
            <stringProp name="WebDriverSampler.language">javascript</stringProp>
          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc-OM10101_SaveOrd_CloseMsg" enabled="true">
            <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 10)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;
function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	

wait.until(conditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@id,&apos;button-1005-btnIconEl&apos;)]&quot;)));
var msg_btn_Ok= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@id,&apos;button-1005-btnIconEl&apos;)]&quot;)));
	msg_btn_Ok.click();


if(${screenshot}==1)
	{
	var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
	FileControl.copyFile(screenshot, new File(&quot;ImgResult/${ProjectCode}/${DateExc}/${ScreenCode}/&quot; + &apos;${ScreenCode}_${DateExc}_DataLoad.png&apos;));
	}</stringProp>
            <stringProp name="WebDriverSampler.parameters"></stringProp>
            <stringProp name="WebDriverSampler.language">javascript</stringProp>
          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc-OM10101_SaveOrd_ProcessOrd" enabled="true">
            <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 10)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;
function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	

wait.until(conditions.elementToBeClickable(pkg.By.xpath(&quot;//*[contains(@id,&apos;cboHandle-triggerWrap&apos;)]/tbody/tr/td[2]&quot;)));
var btn_Handle= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@id,&apos;cboHandle-triggerWrap&apos;)]/tbody/tr/td[2]&quot;)));
	btn_Handle.click();
var sltd_Handle= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(text(),&apos;Xử lý hoàn tất&apos;)]&quot;)));
	sltd_Handle.click();
var btnSave =  WDS.browser.findElement(pkg.By.xpath(&quot;//*[contains(@id,&apos;menuClickbtnSave-btnWrap&apos;)]&quot;));
WDS.sampleResult.sampleStart();
	btnSave.click();//Click on InvtID col
stvwait(1000);
//wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[contains(text(),&apos;Please wait...&apos;)]&quot;)));
wait.until(conditions.invisibilityOfElementLocated(pkg.By.xpath(&quot;//*[contains(text(),&apos;Please wait...&apos;)]&quot;)));
//var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@id, &apos;txtRemark-inputEl&apos;)]&quot;)));
//	cboKey.click();
WDS.sampleResult.sampleEnd();




if(${screenshot}==1)
	{
	var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
	FileControl.copyFile(screenshot, new File(&quot;ImgResult/${ProjectCode}/${DateExc}/${ScreenCode}/&quot; + &apos;${ScreenCode}_${DateExc}_DataLoad.png&apos;));
	}</stringProp>
            <stringProp name="WebDriverSampler.parameters"></stringProp>
            <stringProp name="WebDriverSampler.language">javascript</stringProp>
          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">true</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <kg.apc.jmeter.perfmon.PerfMonCollector guiclass="kg.apc.jmeter.vizualizers.PerfMonGui" testclass="kg.apc.jmeter.perfmon.PerfMonCollector" testname="jp@gc -ServerAPP_CPU" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">Result\SA00500_Result_ServerApp_CPU.jtl</stringProp>
        <longProp name="interval_grouping">1000</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
        <collectionProp name="metricConnections">
          <collectionProp name="367712295">
            <stringProp name="-2051155110">192.168.120.8</stringProp>
            <stringProp name="1600768">4444</stringProp>
            <stringProp name="66952">CPU</stringProp>
            <stringProp name="0"></stringProp>
          </collectionProp>
        </collectionProp>
      </kg.apc.jmeter.perfmon.PerfMonCollector>
      <hashTree/>
      <kg.apc.jmeter.perfmon.PerfMonCollector guiclass="kg.apc.jmeter.vizualizers.PerfMonGui" testclass="kg.apc.jmeter.perfmon.PerfMonCollector" testname="jp@gc -ServerAPP_RAM" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">Result\SA00500_Result_ServerApp_RAM.jtl</stringProp>
        <longProp name="interval_grouping">1000</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
        <collectionProp name="metricConnections">
          <collectionProp name="-1933002026">
            <stringProp name="-2051155110">192.168.120.8</stringProp>
            <stringProp name="1600768">4444</stringProp>
            <stringProp name="-1993889503">Memory</stringProp>
            <stringProp name="0"></stringProp>
          </collectionProp>
        </collectionProp>
      </kg.apc.jmeter.perfmon.PerfMonCollector>
      <hashTree/>
      <kg.apc.jmeter.perfmon.PerfMonCollector guiclass="kg.apc.jmeter.vizualizers.PerfMonGui" testclass="kg.apc.jmeter.perfmon.PerfMonCollector" testname="jp@gc -ServerAPP_Disk" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">Result\SA00500_Result_ServerApp_disk.jtl</stringProp>
        <longProp name="interval_grouping">1000</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
        <collectionProp name="metricConnections">
          <collectionProp name="-43992775">
            <stringProp name="-2051155110">192.168.120.8</stringProp>
            <stringProp name="1600768">4444</stringProp>
            <stringProp name="2112896831">Disks I/O</stringProp>
            <stringProp name="0"></stringProp>
          </collectionProp>
        </collectionProp>
      </kg.apc.jmeter.perfmon.PerfMonCollector>
      <hashTree/>
      <kg.apc.jmeter.perfmon.PerfMonCollector guiclass="kg.apc.jmeter.vizualizers.PerfMonGui" testclass="kg.apc.jmeter.perfmon.PerfMonCollector" testname="jp@gc -ServerAPP_NetWork" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">Result\SA00500_Result_ServerApp_NetWork.jtl</stringProp>
        <longProp name="interval_grouping">1000</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
        <collectionProp name="metricConnections">
          <collectionProp name="-1820662010">
            <stringProp name="-2051155110">192.168.120.8</stringProp>
            <stringProp name="1600768">4444</stringProp>
            <stringProp name="-274342153">Network I/O</stringProp>
            <stringProp name="0"></stringProp>
          </collectionProp>
        </collectionProp>
      </kg.apc.jmeter.perfmon.PerfMonCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>true</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>true</responseData>
            <samplerData>false</samplerData>
            <xml>true</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>true</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <hostname>true</hostname>
            <threadCounts>true</threadCounts>
            <sampleCount>true</sampleCount>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">Result\SA00500_ResultTree.xml</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Note" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </LoopController>
        <hashTree>
          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc-OM10101_Get_CustID" enabled="true">
            <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 10)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;
function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	

var cboCustID= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@id, &apos;btnFindCust-btnEl&apos;)]&quot;)));
	cboCustID.click();
// chose PriceID
wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[contains(@id,&apos;winCustID_header_hd-textEl&apos;)]&quot;)));// wait
wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[contains(@id,&apos;winCustID-body&apos;)]/div/div/div[2]/div/div[2]/div/table/tbody/tr[1]/td[2]&quot;)));// wait
var CustID= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@id,&apos;winCustID-body&apos;)]/div/div/div[2]/div/div[2]/div/table/tbody/tr[1]/td[2]&quot;)));
	
//var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
WDS.sampleResult.sampleStart();
actions.moveToElement(CustID).doubleClick().perform()	
	//CustID.doubleClick();

// Verify done load data
wait.until(conditions.invisibilityOfElementLocated(pkg.By.xpath(&quot;//*[contains(text(),&apos;Please wait...&apos;)]&quot;)));

WDS.sampleResult.sampleEnd();
/*
var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
FileControl.copyFile(screenshot, new File(&quot;ImgResult/${ProjectCode}/${DateExc}/${ScreenCode}/&quot; + &apos;${ScreenCode}_${DateExc}_DataLoad.png&apos;));
*/</stringProp>
            <stringProp name="WebDriverSampler.parameters"></stringProp>
            <stringProp name="WebDriverSampler.language">javascript</stringProp>
          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">2000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc-OM10101_GetTab_Info" enabled="true">
            <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 10)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;
function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
}

WDS.sampleResult.sampleStart();	 
var Tab_Info= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@id,&apos;tabInfo&apos;)]/div/div/div[2]/div/a&quot;)));
	Tab_Info.click();
wait.until(conditions.invisibilityOfElementLocated(pkg.By.xpath(&quot;//*[contains(text(),&apos;Please wait...&apos;)]&quot;)));
wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[contains(@id,&apos;txtOrderDate-triggerWrap&apos;)]&quot;)));	
//var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
//actions.moveToElement(CustID).doubleClick().perform()	
	//CustID.doubleClick();

WDS.sampleResult.sampleEnd();
</stringProp>
            <stringProp name="WebDriverSampler.parameters"></stringProp>
            <stringProp name="WebDriverSampler.language">javascript</stringProp>
          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">2000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc-OM10101_GetTab_Info_TransForm" enabled="true">
            <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 10)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;
function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
}

WDS.sampleResult.sampleStart();
	 
var ColInvtID= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@id,&apos;colInvtID-titleEl&apos;)]&quot;)));
	ColInvtID.click();
wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[contains(@id,&apos;grdOrdDet-body&apos;)]&quot;)));
var grd_InvtID= WDS.browser.findElement(pkg.By.xpath(&quot;//*[contains(@id,&apos;grdOrdDet-body&apos;)]&quot;));
	grd_InvtID.click();
var grd_Line1= WDS.browser.findElement(pkg.By.xpath(&quot;//*[contains(@id,&apos;grdOrdDet-body&apos;)]/div/table/tbody/tr/td/div&quot;));
	grd_Line1.click();
wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[contains(@id,&apos;grdOrdDet-body&apos;)]/div/table/tbody/tr/td[2]/div&quot;)));

WDS.sampleResult.sampleEnd();
</stringProp>
            <stringProp name="WebDriverSampler.parameters"></stringProp>
            <stringProp name="WebDriverSampler.language">javascript</stringProp>
          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">2000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">1</stringProp>
          </LoopController>
          <hashTree>
            <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc-OM10101_Get_InvtID_${InvtID1}" enabled="true">
              <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 10)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;
function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	


var ipt_InvtID =  WDS.browser.findElement(pkg.By.xpath(&quot;//*[contains(@id,&apos;grdOrdDet-body&apos;)]/div/table/tbody/tr/td[2]/div&quot;));
	ipt_InvtID.click();//Click on InvtID col
var ipttxt_InvtID =  WDS.browser.findElement(pkg.By.xpath(&quot;//*[contains(@id,&apos;cboDetInvtID-inputEl&apos;)]&quot;));	
	ipttxt_InvtID.sendKeys(&quot;${InvtID1}&quot;);

WDS.sampleResult.sampleStart();
wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[contains(text(),&apos;${InvtID1}&apos;)]&quot;)));
var slt_InvtID = WDS.browser.findElement(pkg.By.xpath(&quot;//*[contains(text(),&apos;${InvtID1}&apos;)]&quot;));

	slt_InvtID.click();
var Descr_InvtID =  WDS.browser.findElement(pkg.By.xpath(&quot;//*[contains(@id,&apos;grdOrdDet-body&apos;)]/div/table/tbody/tr/td[3]/div&quot;));
	Descr_InvtID.click();//Click on Descr col	
	
wait.until(conditions.invisibilityOfElementLocated(pkg.By.xpath(&quot;//*[contains(text(),&apos;PE rope 2mm Blue 90M L3&apos;)]&quot;)));
//wait.until(conditions.invisibilityOfElementLocated(pkg.By.xpath(&quot;//*[contains(text(),&apos;Loading&quot;)));
stvwait(500);
//wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[contains(text(),&apos;Please wait...&apos;)]&quot;)));
wait.until(conditions.invisibilityOfElementLocated(pkg.By.xpath(&quot;//*[contains(text(),&apos;Please wait...&apos;)]&quot;)));
	
//wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[contains(@id,&apos;cboDetInvtID-triggerWrap&apos;)]/tbody/tr/td[3]&quot;)));	
//var cboInvtID_Arrow =  WDS.browser.findElement(pkg.By.xpath(&quot;//*[contains(@id,&apos;cboDetInvtID-triggerWrap&apos;)]/tbody/tr/td[3]&quot;));
//	cboInvtID_Arrow.click();	
//var cboXtemp_InvtID =  WDS.browser.findElement(pkg.By.xpath(&quot;//*[contains(@class,&apos;ComboXtemplate&apos;)]/table/tbody/tr/th[1]&quot;));
//	cboInvtID_Arrow.click();
//var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
//actions.moveToElement(CustID).doubleClick().perform()	
//wait.until(conditions.invisibilityOfElementLocated(pkg.By.xpath(&quot;//*[contains(text(),&apos;Please wait...&apos;)]&quot;)));
//wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[contains(@id,&apos;txtOrderDate-triggerWrap&apos;)]&quot;)));

WDS.sampleResult.sampleEnd();
if(${screenshot}==1)
	{
	var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
	FileControl.copyFile(screenshot, new File(&quot;ImgResult/${ProjectCode}/${DateExc}/${ScreenCode}/&quot; + &apos;${ScreenCode}_${DateExc}_DataLoad.png&apos;));
	}</stringProp>
              <stringProp name="WebDriverSampler.parameters"></stringProp>
              <stringProp name="WebDriverSampler.language">javascript</stringProp>
            </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
            <hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">2000</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
            <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc-OM10101_Get_InvtID_${InvtID1}_inputQty" enabled="true">
              <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 10)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;
function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	
var textQty_InvtID =  WDS.browser.findElement(pkg.By.xpath(&quot;//*[contains(@id,&apos;grdOrdDet&apos;)]/div[2]/div/table/tbody/tr[1]/td[8]/div&quot;));
	textQty_InvtID.click();//Click on Qty LOT

var Qty_InvtID =  WDS.browser.findElement(pkg.By.xpath(&quot;//*[contains(@id,&apos;grdOrdDet&apos;)]/div[4]/table/tbody/tr/td[2]/table/tbody/tr/td/input&quot;));
//	textQty_InvtID.click();//Click on InvtID col
	Qty_InvtID.sendKeys(&quot;${InvtID1_QtyLot}&quot;);
	
WDS.sampleResult.sampleStart();


WDS.sampleResult.sampleEnd();
if(${screenshot}==1)
	{
	var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
	FileControl.copyFile(screenshot, new File(&quot;ImgResult/${ProjectCode}/${DateExc}/${ScreenCode}/&quot; + &apos;${ScreenCode}_${DateExc}_DataLoad.png&apos;));
	}</stringProp>
              <stringProp name="WebDriverSampler.parameters"></stringProp>
              <stringProp name="WebDriverSampler.language">javascript</stringProp>
            </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
            <hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">500</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
            <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc-OM10101_Get_InvtID_${InvtID1}_inputPrice" enabled="true">
              <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 10)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;
function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	



var textPrice_InvtID =  WDS.browser.findElement(pkg.By.xpath(&quot;//*[contains(@id,&apos;grdOrdDet&apos;)]/div[2]/div/table/tbody/tr[1]/td[11]/div&quot;));
	textPrice_InvtID.click();//Click on Price	
//wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[contains(@id,&apos;txtDetSlsPrice-inputCell&apos;)]/input&apos;)]&quot;)));
var Price_InvtID =  WDS.browser.findElement(pkg.By.xpath(&quot;//*[contains(@id,&apos;grdOrdDet&apos;)]/div[5]/table/tbody/tr/td[2]/table/tbody/tr/td/input&quot;));
	//textPrice_InvtID.click();//Click on InvtID col
	Price_InvtID.sendKeys(&quot;${InvtID1_PriceLot}&quot;);

var Descr_InvtID =  WDS.browser.findElement(pkg.By.xpath(&quot;//*[contains(@id,&apos;grdOrdDet-body&apos;)]/div/table/tbody/tr/td[3]/div&quot;));
	Descr_InvtID.click();//Click on Descr col	
	
WDS.sampleResult.sampleStart();
WDS.sampleResult.sampleEnd();
if(${screenshot}==1)
	{
	var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
	FileControl.copyFile(screenshot, new File(&quot;ImgResult/${ProjectCode}/${DateExc}/${ScreenCode}/&quot; + &apos;${ScreenCode}_${DateExc}_DataLoad.png&apos;));
	}</stringProp>
              <stringProp name="WebDriverSampler.parameters"></stringProp>
              <stringProp name="WebDriverSampler.language">javascript</stringProp>
            </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
            <hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">500</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc-OM10101_Get_InvtID_${InvtID1}_SaveOrd" enabled="true">
            <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 10)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;
function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	

var btnSave =  WDS.browser.findElement(pkg.By.xpath(&quot;//*[contains(@id,&apos;menuClickbtnSave-btnWrap&apos;)]&quot;));
WDS.sampleResult.sampleStart();
	btnSave.click();//Click on InvtID col
stvwait(1000);
//wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[contains(text(),&apos;Please wait...&apos;)]&quot;)));
wait.until(conditions.invisibilityOfElementLocated(pkg.By.xpath(&quot;//*[contains(text(),&apos;Please wait...&apos;)]&quot;)));
//var cboKey= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@id, &apos;txtRemark-inputEl&apos;)]&quot;)));
//	cboKey.click();
WDS.sampleResult.sampleEnd();
stvwait(1000);
var msg_btn_Ok= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@id,&apos;button-1005-btnIconEl&apos;)]&quot;)));
	msg_btn_Ok.click();


if(${screenshot}==1)
	{
	var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
	FileControl.copyFile(screenshot, new File(&quot;ImgResult/${ProjectCode}/${DateExc}/${ScreenCode}/&quot; + &apos;${ScreenCode}_${DateExc}_DataLoad.png&apos;));
	}</stringProp>
            <stringProp name="WebDriverSampler.parameters"></stringProp>
            <stringProp name="WebDriverSampler.language">javascript</stringProp>
          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc-OM10101_Get_InvtID_${InvtID1}_SaveOrd_CloseMsg" enabled="true">
            <stringProp name="WebDriverSampler.script">//var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait=new support_ui.WebDriverWait(WDS.browser, 10)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var timeunit = java.util.concurrent.TimeUnit
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var File = java.io.File;
var FileControl = org.apache.commons.io.FileUtils;
function stvwait(ms){
   var start = new Date().getTime();
   var end = start;
   while(end &lt; start + ms) {
     end = new Date().getTime();
 	 }
	}	

var msg_btn_Ok= WDS.browser.findElement((pkg.By.xpath(&quot;//*[contains(@id,&apos;button-1005-btnIconEl&apos;)]&quot;)));
	msg_btn_Ok.click();


if(${screenshot}==1)
	{
	var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
	FileControl.copyFile(screenshot, new File(&quot;ImgResult/${ProjectCode}/${DateExc}/${ScreenCode}/&quot; + &apos;${ScreenCode}_${DateExc}_DataLoad.png&apos;));
	}</stringProp>
            <stringProp name="WebDriverSampler.parameters"></stringProp>
            <stringProp name="WebDriverSampler.language">javascript</stringProp>
          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
